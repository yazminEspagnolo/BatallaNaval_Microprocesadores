   1               		.file	"UART.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.UART_Init,"ax",@progbits
  11               	.global	UART_Init
  13               	UART_Init:
  14               	.LFB10:
  15               		.file 1 "../src/UART.c"
   1:../src/UART.c **** /*
   2:../src/UART.c ****  * UART.c
   3:../src/UART.c ****  *
   4:../src/UART.c ****  * Created: 11/2/2022 1:03:09 PM
   5:../src/UART.c ****  *  Author: jacoby
   6:../src/UART.c ****  */ 
   7:../src/UART.c **** 
   8:../src/UART.c **** 
   9:../src/UART.c **** 
  10:../src/UART.c **** #define F_CPU 16000000UL // Defining the CPU Frequency
  11:../src/UART.c **** 
  12:../src/UART.c **** #include <avr/io.h>      // Contains all the I/O Register Macros
  13:../src/UART.c **** #include <util/delay.h>  // Generates a Blocking Delay
  14:../src/UART.c **** #include <avr/interrupt.h>
  15:../src/UART.c **** #include <stdint.h>
  16:../src/UART.c **** #include <inttypes.h>
  17:../src/UART.c **** #include <stdlib.h>
  18:../src/UART.c **** #include <string.h>
  19:../src/UART.c **** #include "UART.h"
  20:../src/UART.c **** #include "cqueue.h"
  21:../src/UART.c **** 
  22:../src/UART.c **** 
  23:../src/UART.c **** #define USART_BAUDRATE 9600 // Desired Baud Rate
  24:../src/UART.c **** #define BAUD_PRESCALER (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
  25:../src/UART.c **** 
  26:../src/UART.c **** #define ASYNCHRONOUS (0<<UMSEL00) // USART Mode Selection
  27:../src/UART.c **** 
  28:../src/UART.c **** #define DISABLED    (0<<UPM00)
  29:../src/UART.c **** #define EVEN_PARITY (2<<UPM00)
  30:../src/UART.c **** #define ODD_PARITY  (3<<UPM00)
  31:../src/UART.c **** #define PARITY_MODE  DISABLED // USART Parity Bit Selection
  32:../src/UART.c **** 
  33:../src/UART.c **** #define ONE_BIT (0<<USBS0)
  34:../src/UART.c **** #define TWO_BIT (1<<USBS0)
  35:../src/UART.c **** #define STOP_BIT ONE_BIT      // USART Stop Bit Selection
  36:../src/UART.c **** 
  37:../src/UART.c **** #define FIVE_BIT  (0<<UCSZ00)
  38:../src/UART.c **** #define SIX_BIT   (1<<UCSZ00)
  39:../src/UART.c **** #define SEVEN_BIT (2<<UCSZ00)
  40:../src/UART.c **** #define EIGHT_BIT (3<<UCSZ00)
  41:../src/UART.c **** #define DATA_BIT   EIGHT_BIT  // USART Data Bit Selection
  42:../src/UART.c **** #define RX_COMPLETE_INTERRUPT         (1<<RXCIE0)
  43:../src/UART.c **** #define DATA_REGISTER_EMPTY_INTERRUPT (1<<UDRIE0)
  44:../src/UART.c **** 
  45:../src/UART.c **** 
  46:../src/UART.c **** 
  47:../src/UART.c **** 
  48:../src/UART.c **** 
  49:../src/UART.c **** 
  50:../src/UART.c **** volatile uint8_t USART_TransmitBuffer; // Global Buffer
  51:../src/UART.c **** volatile uint8_t USART_ReceiveBuffer; // Global Buffer
  52:../src/UART.c **** 
  53:../src/UART.c **** void UART_TransmitInterrupt(uint8_t Buffer);
  54:../src/UART.c **** void UART_TransmitPolling(uint8_t DataByte);
  55:../src/UART.c **** uint8_t UART_ReceivePolling(void);
  56:../src/UART.c **** char msgg[10];
  57:../src/UART.c **** 
  58:../src/UART.c **** void UART_Init()
  59:../src/UART.c **** {
  16               		.loc 1 59 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  60:../src/UART.c **** 	// Set Baud Rate
  61:../src/UART.c **** 	UBRR0H = BAUD_PRESCALER >> 8;
  22               		.loc 1 61 0
  23 0000 1092 C500 		sts 197,__zero_reg__
  62:../src/UART.c **** 	UBRR0L = BAUD_PRESCALER;
  24               		.loc 1 62 0
  25 0004 87E6      		ldi r24,lo8(103)
  26 0006 8093 C400 		sts 196,r24
  63:../src/UART.c **** 	
  64:../src/UART.c **** 	// Set Frame Format
  65:../src/UART.c **** 	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
  27               		.loc 1 65 0
  28 000a 86E0      		ldi r24,lo8(6)
  29 000c 8093 C200 		sts 194,r24
  66:../src/UART.c **** 	
  67:../src/UART.c **** 	// Enable Receiver and Transmitter
  68:../src/UART.c **** 	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  30               		.loc 1 68 0
  31 0010 E1EC      		ldi r30,lo8(-63)
  32 0012 F0E0      		ldi r31,0
  33 0014 88E1      		ldi r24,lo8(24)
  34 0016 8083      		st Z,r24
  69:../src/UART.c **** 	
  70:../src/UART.c **** 	// RX Interrupts
  71:../src/UART.c **** 	UCSR0B |= RX_COMPLETE_INTERRUPT; //Enable RX interrupts
  35               		.loc 1 71 0
  36 0018 8081      		ld r24,Z
  37 001a 8068      		ori r24,lo8(-128)
  38 001c 8083      		st Z,r24
  72:../src/UART.c **** 	
  73:../src/UART.c **** 	QueueInit();	// initialize RX queue
  39               		.loc 1 73 0
  40 001e 0E94 0000 		call QueueInit
  41               	.LVL0:
  42               	.LBB8:
  43               	.LBB9:
  44               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  45               		.loc 2 187 0
  46 0022 8FE9      		ldi r24,lo8(3999)
  47 0024 9FE0      		ldi r25,hi8(3999)
  48 0026 0197      	1:	sbiw r24,1
  49 0028 01F4      		brne 1b
  50 002a 00C0      		rjmp .
  51 002c 0000      		nop
  52               	.LVL1:
  53 002e 0895      		ret
  54               	.LBE9:
  55               	.LBE8:
  56               		.cfi_endproc
  57               	.LFE10:
  59               		.section	.text.UART_rx_status,"ax",@progbits
  60               	.global	UART_rx_status
  62               	UART_rx_status:
  63               	.LFB13:
  74:../src/UART.c **** 	
  75:../src/UART.c **** 	_delay_ms(1);  //Allow dividers to settle 
  76:../src/UART.c **** }
  77:../src/UART.c **** 
  78:../src/UART.c **** // Test Bench
  79:../src/UART.c **** int uart_test(void)
  80:../src/UART.c **** {
  81:../src/UART.c **** 
  82:../src/UART.c **** 	char rxdata;
  83:../src/UART.c **** 	while (1)
  84:../src/UART.c **** 	{
  85:../src/UART.c **** 
  86:../src/UART.c **** //			TX IRQ Test
  87:../src/UART.c **** /*
  88:../src/UART.c **** 			sei();					// Enable global Interrupts
  89:../src/UART.c **** 			while(1)
  90:../src/UART.c **** 			{
  91:../src/UART.c **** 					USART_TransmitInterrupt('A');
  92:../src/UART.c **** 					_delay_ms(500);
  93:../src/UART.c **** 			}
  94:../src/UART.c **** */
  95:../src/UART.c **** 
  96:../src/UART.c **** 
  97:../src/UART.c **** //			RX IRQ Test
  98:../src/UART.c **** 
  99:../src/UART.c **** 
 100:../src/UART.c **** 
 101:../src/UART.c **** 			while(1)
 102:../src/UART.c **** 			{
 103:../src/UART.c **** 				if(UART_rx_status())
 104:../src/UART.c **** 				{
 105:../src/UART.c **** 					rxdata=UART_get_data();
 106:../src/UART.c **** 					UART_send_data(rxdata+1);
 107:../src/UART.c **** 					
 108:../src/UART.c **** 				}
 109:../src/UART.c **** 			
 110:../src/UART.c **** 			}
 111:../src/UART.c **** 	}
 112:../src/UART.c **** 	
 113:../src/UART.c **** 	return 0;
 114:../src/UART.c **** }
 115:../src/UART.c **** 		
 116:../src/UART.c **** 
 117:../src/UART.c **** 
 118:../src/UART.c **** 
 119:../src/UART.c **** 
 120:../src/UART.c **** // ==========================SERVICES=========================================//
 121:../src/UART.c **** //***************************************
 122:../src/UART.c **** // UART_putstring(uint8_t*)
 123:../src/UART.c **** // Sends a null terminated string
 124:../src/UART.c **** //***************************************
 125:../src/UART.c **** void UART_putstring(char * StringPtr){
 126:../src/UART.c **** 	while(*StringPtr != 0x00){
 127:../src/UART.c **** 		UART_send_data(*StringPtr);
 128:../src/UART.c **** 	StringPtr++;}
 129:../src/UART.c **** }
 130:../src/UART.c **** 
 131:../src/UART.c **** 
 132:../src/UART.c **** //***************************************
 133:../src/UART.c **** // UART_rx_status(void)
 134:../src/UART.c **** // returns <> 0 if any data was received 
 135:../src/UART.c **** //***************************************
 136:../src/UART.c **** uint8_t UART_rx_status(void)
 137:../src/UART.c **** {
  64               		.loc 1 137 0
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
 138:../src/UART.c **** 	return (QueueStatus());
  70               		.loc 1 138 0
  71 0000 0E94 0000 		call QueueStatus
  72               	.LVL2:
 139:../src/UART.c **** }
  73               		.loc 1 139 0
  74 0004 0895      		ret
  75               		.cfi_endproc
  76               	.LFE13:
  78               		.section	.text.UART_get_data,"ax",@progbits
  79               	.global	UART_get_data
  81               	UART_get_data:
  82               	.LFB14:
 140:../src/UART.c **** //***************************************
 141:../src/UART.c **** // UART_get_data(void)
 142:../src/UART.c **** // returns received data
 143:../src/UART.c **** //***************************************
 144:../src/UART.c **** uint8_t UART_get_data(void)
 145:../src/UART.c **** {
  83               		.loc 1 145 0
  84               		.cfi_startproc
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
 146:../src/UART.c **** 	return (PullQueue());
  89               		.loc 1 146 0
  90 0000 0E94 0000 		call PullQueue
  91               	.LVL3:
 147:../src/UART.c **** }
  92               		.loc 1 147 0
  93 0004 0895      		ret
  94               		.cfi_endproc
  95               	.LFE14:
  97               		.section	.text.UART_ReceivePolling,"ax",@progbits
  98               	.global	UART_ReceivePolling
 100               	UART_ReceivePolling:
 101               	.LFB16:
 148:../src/UART.c **** //***************************************
 149:../src/UART.c **** // UART_send_data(uint8_t)
 150:../src/UART.c **** // Sends one byte to the UART (blocking) 
 151:../src/UART.c **** //***************************************
 152:../src/UART.c **** void UART_send_data(char data)
 153:../src/UART.c **** {
 154:../src/UART.c **** 	UART_TransmitPolling(data);
 155:../src/UART.c **** }
 156:../src/UART.c **** 
 157:../src/UART.c **** // Private functions
 158:../src/UART.c **** 
 159:../src/UART.c **** uint8_t UART_ReceivePolling()
 160:../src/UART.c **** {
 102               		.loc 1 160 0
 103               		.cfi_startproc
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
 161:../src/UART.c **** 	uint8_t DataByte;
 162:../src/UART.c **** 	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
 108               		.loc 1 162 0
 109 0000 E0EC      		ldi r30,lo8(-64)
 110 0002 F0E0      		ldi r31,0
 111               	.L5:
 112               		.loc 1 162 0 is_stmt 0 discriminator 1
 113 0004 8081      		ld r24,Z
 114               		.loc 1 162 0 is_stmt 1 discriminator 1
 115 0006 8823      		tst r24
 116 0008 04F4      		brge .L5
 163:../src/UART.c **** 	DataByte = UDR0 ;
 117               		.loc 1 163 0
 118 000a 8091 C600 		lds r24,198
 119               	.LVL4:
 164:../src/UART.c **** 	return DataByte;
 165:../src/UART.c **** }
 120               		.loc 1 165 0
 121 000e 0895      		ret
 122               		.cfi_endproc
 123               	.LFE16:
 125               		.section	.text.UART_TransmitPolling,"ax",@progbits
 126               	.global	UART_TransmitPolling
 128               	UART_TransmitPolling:
 129               	.LFB17:
 166:../src/UART.c **** 
 167:../src/UART.c **** void UART_TransmitPolling(uint8_t DataByte)
 168:../src/UART.c **** {
 130               		.loc 1 168 0
 131               		.cfi_startproc
 132               	.LVL5:
 133               	/* prologue: function */
 134               	/* frame size = 0 */
 135               	/* stack size = 0 */
 136               	.L__stack_usage = 0
 169:../src/UART.c **** 	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 137               		.loc 1 169 0
 138 0000 E0EC      		ldi r30,lo8(-64)
 139 0002 F0E0      		ldi r31,0
 140               	.L8:
 141               		.loc 1 169 0 is_stmt 0 discriminator 1
 142 0004 9081      		ld r25,Z
 143               		.loc 1 169 0 is_stmt 1 discriminator 1
 144 0006 95FF      		sbrs r25,5
 145 0008 00C0      		rjmp .L8
 170:../src/UART.c **** 	UDR0 = DataByte;
 146               		.loc 1 170 0
 147 000a 8093 C600 		sts 198,r24
 148 000e 0895      		ret
 149               		.cfi_endproc
 150               	.LFE17:
 152               		.section	.text.UART_send_data,"ax",@progbits
 153               	.global	UART_send_data
 155               	UART_send_data:
 156               	.LFB15:
 153:../src/UART.c **** 	UART_TransmitPolling(data);
 157               		.loc 1 153 0
 158               		.cfi_startproc
 159               	.LVL6:
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
 154:../src/UART.c **** }
 164               		.loc 1 154 0
 165 0000 0E94 0000 		call UART_TransmitPolling
 166               	.LVL7:
 167 0004 0895      		ret
 168               		.cfi_endproc
 169               	.LFE15:
 171               		.section	.text.UART_putstring,"ax",@progbits
 172               	.global	UART_putstring
 174               	UART_putstring:
 175               	.LFB12:
 125:../src/UART.c **** 	while(*StringPtr != 0x00){
 176               		.loc 1 125 0
 177               		.cfi_startproc
 178               	.LVL8:
 179 0000 CF93      		push r28
 180               	.LCFI0:
 181               		.cfi_def_cfa_offset 3
 182               		.cfi_offset 28, -2
 183 0002 DF93      		push r29
 184               	.LCFI1:
 185               		.cfi_def_cfa_offset 4
 186               		.cfi_offset 29, -3
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 2 */
 190               	.L__stack_usage = 2
 191 0004 EC01      		movw r28,r24
 126:../src/UART.c **** 		UART_send_data(*StringPtr);
 192               		.loc 1 126 0
 193 0006 8881      		ld r24,Y
 194               	.LVL9:
 195 0008 8823      		tst r24
 196 000a 01F0      		breq .L11
 197 000c 2196      		adiw r28,1
 198               	.LVL10:
 199               	.L13:
 200               	.LBB12:
 201               	.LBB13:
 154:../src/UART.c **** }
 202               		.loc 1 154 0
 203 000e 0E94 0000 		call UART_TransmitPolling
 204               	.LVL11:
 205               	.LBE13:
 206               	.LBE12:
 126:../src/UART.c **** 		UART_send_data(*StringPtr);
 207               		.loc 1 126 0
 208 0012 8991      		ld r24,Y+
 209               	.LVL12:
 210 0014 8111      		cpse r24,__zero_reg__
 211 0016 00C0      		rjmp .L13
 212               	.LVL13:
 213               	.L11:
 214               	/* epilogue start */
 129:../src/UART.c **** 
 215               		.loc 1 129 0
 216 0018 DF91      		pop r29
 217 001a CF91      		pop r28
 218 001c 0895      		ret
 219               		.cfi_endproc
 220               	.LFE12:
 222               		.section	.text.uart_test,"ax",@progbits
 223               	.global	uart_test
 225               	uart_test:
 226               	.LFB11:
  80:../src/UART.c **** 
 227               		.loc 1 80 0
 228               		.cfi_startproc
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 231               	/* stack size = 0 */
 232               	.L__stack_usage = 0
 233               	.L16:
 234               	.LBB20:
 235               	.LBB21:
 138:../src/UART.c **** }
 236               		.loc 1 138 0
 237 0000 0E94 0000 		call QueueStatus
 238               	.LVL14:
 239               	.LBE21:
 240               	.LBE20:
 103:../src/UART.c **** 				{
 241               		.loc 1 103 0
 242 0004 8823      		tst r24
 243 0006 01F0      		breq .L16
 244               	.LBB22:
 245               	.LBB23:
 146:../src/UART.c **** }
 246               		.loc 1 146 0
 247 0008 0E94 0000 		call PullQueue
 248               	.LVL15:
 249               	.LBE23:
 250               	.LBE22:
 251               	.LBB24:
 252               	.LBB25:
 154:../src/UART.c **** }
 253               		.loc 1 154 0
 254 000c 8F5F      		subi r24,lo8(-(1))
 255               	.LVL16:
 256 000e 0E94 0000 		call UART_TransmitPolling
 257               	.LVL17:
 258 0012 00C0      		rjmp .L16
 259               	.LBE25:
 260               	.LBE24:
 261               		.cfi_endproc
 262               	.LFE11:
 264               		.section	.text.UART_TransmitInterrupt,"ax",@progbits
 265               	.global	UART_TransmitInterrupt
 267               	UART_TransmitInterrupt:
 268               	.LFB18:
 171:../src/UART.c **** }
 172:../src/UART.c **** 
 173:../src/UART.c **** void UART_TransmitInterrupt(uint8_t Buffer)
 174:../src/UART.c **** {
 269               		.loc 1 174 0
 270               		.cfi_startproc
 271               	.LVL18:
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	/* stack size = 0 */
 275               	.L__stack_usage = 0
 175:../src/UART.c **** 	USART_TransmitBuffer = Buffer;
 276               		.loc 1 175 0
 277 0000 8093 0000 		sts USART_TransmitBuffer,r24
 176:../src/UART.c **** 	UCSR0B |= DATA_REGISTER_EMPTY_INTERRUPT; // Enables the Interrupt
 278               		.loc 1 176 0
 279 0004 E1EC      		ldi r30,lo8(-63)
 280 0006 F0E0      		ldi r31,0
 281 0008 8081      		ld r24,Z
 282               	.LVL19:
 283 000a 8062      		ori r24,lo8(32)
 284 000c 8083      		st Z,r24
 285               	.LVL20:
 286 000e 0895      		ret
 287               		.cfi_endproc
 288               	.LFE18:
 290               		.section	.text.__vector_19,"ax",@progbits
 291               	.global	__vector_19
 293               	__vector_19:
 294               	.LFB19:
 177:../src/UART.c **** }
 178:../src/UART.c **** 
 179:../src/UART.c **** 
 180:../src/UART.c **** // ================================== TX & RX ISR ==================================
 181:../src/UART.c **** 
 182:../src/UART.c **** 
 183:../src/UART.c **** //======= TX ISR =======================
 184:../src/UART.c **** ISR(USART_UDRE_vect)
 185:../src/UART.c **** {
 295               		.loc 1 185 0
 296               		.cfi_startproc
 297 0000 1F92      		push r1
 298               	.LCFI2:
 299               		.cfi_def_cfa_offset 3
 300               		.cfi_offset 1, -2
 301 0002 0F92      		push r0
 302               	.LCFI3:
 303               		.cfi_def_cfa_offset 4
 304               		.cfi_offset 0, -3
 305 0004 0FB6      		in r0,__SREG__
 306 0006 0F92      		push r0
 307 0008 1124      		clr __zero_reg__
 308 000a 8F93      		push r24
 309               	.LCFI4:
 310               		.cfi_def_cfa_offset 5
 311               		.cfi_offset 24, -4
 312 000c EF93      		push r30
 313               	.LCFI5:
 314               		.cfi_def_cfa_offset 6
 315               		.cfi_offset 30, -5
 316 000e FF93      		push r31
 317               	.LCFI6:
 318               		.cfi_def_cfa_offset 7
 319               		.cfi_offset 31, -6
 320               	/* prologue: Signal */
 321               	/* frame size = 0 */
 322               	/* stack size = 6 */
 323               	.L__stack_usage = 6
 186:../src/UART.c **** 	UDR0 = USART_TransmitBuffer;
 324               		.loc 1 186 0
 325 0010 8091 0000 		lds r24,USART_TransmitBuffer
 326 0014 8093 C600 		sts 198,r24
 187:../src/UART.c **** 	UCSR0B &= ~DATA_REGISTER_EMPTY_INTERRUPT; // Disables the Interrupt, uncomment for one time transm
 327               		.loc 1 187 0
 328 0018 E1EC      		ldi r30,lo8(-63)
 329 001a F0E0      		ldi r31,0
 330 001c 8081      		ld r24,Z
 331 001e 8F7D      		andi r24,lo8(-33)
 332 0020 8083      		st Z,r24
 333               	/* epilogue start */
 188:../src/UART.c **** }
 334               		.loc 1 188 0
 335 0022 FF91      		pop r31
 336 0024 EF91      		pop r30
 337 0026 8F91      		pop r24
 338 0028 0F90      		pop r0
 339 002a 0FBE      		out __SREG__,r0
 340 002c 0F90      		pop r0
 341 002e 1F90      		pop r1
 342 0030 1895      		reti
 343               		.cfi_endproc
 344               	.LFE19:
 346               		.section	.text.__vector_18,"ax",@progbits
 347               	.global	__vector_18
 349               	__vector_18:
 350               	.LFB20:
 189:../src/UART.c **** 
 190:../src/UART.c **** //============== RX ISR =======================
 191:../src/UART.c **** ISR(USART_RX_vect)
 192:../src/UART.c **** {
 351               		.loc 1 192 0
 352               		.cfi_startproc
 353 0000 1F92      		push r1
 354               	.LCFI7:
 355               		.cfi_def_cfa_offset 3
 356               		.cfi_offset 1, -2
 357 0002 0F92      		push r0
 358               	.LCFI8:
 359               		.cfi_def_cfa_offset 4
 360               		.cfi_offset 0, -3
 361 0004 0FB6      		in r0,__SREG__
 362 0006 0F92      		push r0
 363 0008 1124      		clr __zero_reg__
 364 000a 2F93      		push r18
 365               	.LCFI9:
 366               		.cfi_def_cfa_offset 5
 367               		.cfi_offset 18, -4
 368 000c 3F93      		push r19
 369               	.LCFI10:
 370               		.cfi_def_cfa_offset 6
 371               		.cfi_offset 19, -5
 372 000e 4F93      		push r20
 373               	.LCFI11:
 374               		.cfi_def_cfa_offset 7
 375               		.cfi_offset 20, -6
 376 0010 5F93      		push r21
 377               	.LCFI12:
 378               		.cfi_def_cfa_offset 8
 379               		.cfi_offset 21, -7
 380 0012 6F93      		push r22
 381               	.LCFI13:
 382               		.cfi_def_cfa_offset 9
 383               		.cfi_offset 22, -8
 384 0014 7F93      		push r23
 385               	.LCFI14:
 386               		.cfi_def_cfa_offset 10
 387               		.cfi_offset 23, -9
 388 0016 8F93      		push r24
 389               	.LCFI15:
 390               		.cfi_def_cfa_offset 11
 391               		.cfi_offset 24, -10
 392 0018 9F93      		push r25
 393               	.LCFI16:
 394               		.cfi_def_cfa_offset 12
 395               		.cfi_offset 25, -11
 396 001a AF93      		push r26
 397               	.LCFI17:
 398               		.cfi_def_cfa_offset 13
 399               		.cfi_offset 26, -12
 400 001c BF93      		push r27
 401               	.LCFI18:
 402               		.cfi_def_cfa_offset 14
 403               		.cfi_offset 27, -13
 404 001e EF93      		push r30
 405               	.LCFI19:
 406               		.cfi_def_cfa_offset 15
 407               		.cfi_offset 30, -14
 408 0020 FF93      		push r31
 409               	.LCFI20:
 410               		.cfi_def_cfa_offset 16
 411               		.cfi_offset 31, -15
 412               	/* prologue: Signal */
 413               	/* frame size = 0 */
 414               	/* stack size = 15 */
 415               	.L__stack_usage = 15
 193:../src/UART.c **** 	PushQueue(UDR0);
 416               		.loc 1 193 0
 417 0022 8091 C600 		lds r24,198
 418 0026 0E94 0000 		call PushQueue
 419               	.LVL21:
 420               	/* epilogue start */
 194:../src/UART.c **** }
 421               		.loc 1 194 0
 422 002a FF91      		pop r31
 423 002c EF91      		pop r30
 424 002e BF91      		pop r27
 425 0030 AF91      		pop r26
 426 0032 9F91      		pop r25
 427 0034 8F91      		pop r24
 428 0036 7F91      		pop r23
 429 0038 6F91      		pop r22
 430 003a 5F91      		pop r21
 431 003c 4F91      		pop r20
 432 003e 3F91      		pop r19
 433 0040 2F91      		pop r18
 434 0042 0F90      		pop r0
 435 0044 0FBE      		out __SREG__,r0
 436 0046 0F90      		pop r0
 437 0048 1F90      		pop r1
 438 004a 1895      		reti
 439               		.cfi_endproc
 440               	.LFE20:
 442               		.section	.text.send_num,"ax",@progbits
 443               	.global	send_num
 445               	send_num:
 446               	.LFB21:
 195:../src/UART.c **** 
 196:../src/UART.c **** 
 197:../src/UART.c **** 
 198:../src/UART.c **** void send_num(int numero)
 199:../src/UART.c **** {
 447               		.loc 1 199 0
 448               		.cfi_startproc
 449               	.LVL22:
 450               	/* prologue: function */
 451               	/* frame size = 0 */
 452               	/* stack size = 0 */
 453               	.L__stack_usage = 0
 454               	.LBB26:
 455               	.LBB27:
 456               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Copyright (c) 2004,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Portions of documentation Copyright (c) 1990, 1991, 1993, 1994
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The Regents of the University of California.
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    All rights reserved.
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Redistribution and use in source and binary forms, with or without
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    modification, are permitted provided that the following conditions are met:
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Redistributions of source code must retain the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      notice, this list of conditions and the following disclaimer.
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Redistributions in binary form must reproduce the above copyright
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      notice, this list of conditions and the following disclaimer in
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the documentation and/or other materials provided with the
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      distribution.
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Neither the name of the copyright holders nor the names of
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      contributors may be used to endorse or promote products derived
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      from this software without specific prior written permission.
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   POSSIBILITY OF SUCH DAMAGE.
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****   $Id$
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef _STDLIB_H_
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	_STDLIB_H_ 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ASSEMBLER__
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_NULL
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_size_t
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_wchar_t
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #include <stddef.h>
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ptr_t
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __ptr_t void *
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif	/* !__DOXYGEN__ */
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifdef __cplusplus
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern "C" {
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \file */
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \defgroup avr_stdlib <stdlib.h>: General utilities
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \code #include <stdlib.h> \endcode
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     This file declares some basic C macros and functions as
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     defined by the ISO standard, plus some AVR-specific extensions.
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@{*/
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Result type for function div(). */
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef struct {
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	int quot;                   /**< The Quotient. */
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	int rem;                    /**< The Remainder. */
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** } div_t;
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Result type for function ldiv(). */
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef struct {
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	long quot;                  /**< The Quotient. */
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	long rem;                   /**< The Remainder. */
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** } ldiv_t;
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Comparision function type for qsort(), just for convenience. */
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef int (*__compar_fn_t)(const void *, const void *);
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_CONST__
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_CONST__ __attribute__((__const__))
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_MALLOC__
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_MALLOC__ __attribute__((__malloc__))
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_NORETURN__
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_NORETURN__ __attribute__((__noreturn__))
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_PURE__
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_PURE__ __attribute__((__pure__))
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef	__ATTR_GNU_INLINE__
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # ifdef  __GNUC_STDC_INLINE__
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #  define __ATTR_GNU_INLINE__   __attribute__((__gnu_inline__))
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # else
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #  define __ATTR_GNU_INLINE__
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** # endif
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The abort() function causes abnormal program termination to occur.
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     This realization disables interrupts and jumps to _exit() function
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     with argument equal to 1. In the limited AVR environment, execution is
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     effectively halted by entering an infinite loop. */
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void abort(void) __ATTR_NORETURN__;
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The abs() function computes the absolute value of the integer \c i.
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int abs(int __i) __ATTR_CONST__;
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	abs(__i) __builtin_abs(__i)
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The labs() function computes the absolute value of the long integer
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c i.
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long labs(long __i) __ATTR_CONST__;
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define labs(__i) __builtin_labs(__i)
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The bsearch() function searches an array of \c nmemb objects, the
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      initial member of which is pointed to by \c base, for a member
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      that matches the object pointed to by \c key.  The size of each
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      member of the array is specified by \c size.
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The contents of the array should be in ascending sorted order
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      according to the comparison function referenced by \c compar.
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The \c compar routine is expected to have two arguments which
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      point to the key object and to an array member, in that order,
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      and should return an integer less than, equal to, or greater than
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      zero if the key object is found, respectively, to be less than,
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      to match, or be greater than the array member.
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The bsearch() function returns a pointer to a matching member of
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the array, or a null pointer if no match is found.  If two
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      members compare as equal, which member is matched is unspecified.
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 		     size_t __size, int (*__compar)(const void *, const void *));
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /* __divmodhi4 and __divmodsi4 from libgcc.a */
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The div() function computes the value \c num/denom and returns
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the quotient and remainder in a structure named \c div_t that
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      contains two int members named \c quot and \c rem.
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __ATTR_CONST__;
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The ldiv() function computes the value \c num/denom and returns
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      the quotient and remainder in a structure named \c ldiv_t that
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      contains two long integer members named \c quot and \c rem.
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __ATTR_CONST__;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The qsort() function is a modified partition-exchange sort, or
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      quicksort.
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The qsort() function sorts an array of \c nmemb objects, the
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      initial member of which is pointed to by \c base.  The size of
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      each object is specified by \c size.  The contents of the array
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      base are sorted in ascending order according to a comparison
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      function pointed to by \c compar, which requires two arguments
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      pointing to the objects being compared.
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The comparison function must return an integer less than, equal
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      to, or greater than zero if the first argument is considered to
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      be respectively less than, equal to, or greater than the second.
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void qsort(void *__base, size_t __nmemb, size_t __size,
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 		  __compar_fn_t __compar);
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 188:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 189:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtol() function converts the string in \c nptr to a long
 190:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     value.  The conversion is done according to the given base, which
 191:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     must be between 2 and 36 inclusive, or be the special value 0.
 192:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 193:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 194:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 195:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 196:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 197:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 198:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 199:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 200:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The remainder of the string is converted to a long value in the
 201:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     obvious manner, stopping at the first character which is not a
 202:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     valid digit in the given base.  (In bases above 10, the letter \c 'A'
 203:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     in either upper or lower case represents 10, \c 'B' represents 11,
 204:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     and so forth, with \c 'Z' representing 35.)
 205:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 206:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     If \c endptr is not NULL, strtol() stores the address of the first
 207:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 208:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     however, strtol() stores the original value of \c nptr in \c
 209:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 210:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     on return, the entire string was valid.)
 211:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 212:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtol() function returns the result of the conversion, unless
 213:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     the value would underflow or overflow.  If no conversion could be
 214:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     performed, 0 is returned.  If an overflow or underflow occurs, \c
 215:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     errno is set to \ref avr_errno "ERANGE" and the function return value
 216:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     is clamped to \c LONG_MIN or \c LONG_MAX, respectively.
 217:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 218:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long strtol(const char *__nptr, char **__endptr, int __base);
 219:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 220:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 221:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtoul() function converts the string in \c nptr to an
 222:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     unsigned long value.  The conversion is done according to the
 223:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     given base, which must be between 2 and 36 inclusive, or be the
 224:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     special value 0.
 225:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 226:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 227:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 228:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 229:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 230:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 231:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 232:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 233:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The remainder of the string is converted to an unsigned long value
 234:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     in the obvious manner, stopping at the first character which is
 235:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     not a valid digit in the given base.  (In bases above 10, the
 236:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     letter \c 'A' in either upper or lower case represents 10, \c 'B'
 237:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     represents 11, and so forth, with \c 'Z' representing 35.)
 238:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 239:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     If \c endptr is not NULL, strtoul() stores the address of the first
 240:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 241:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     however, strtoul() stores the original value of \c nptr in \c
 242:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 243:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     on return, the entire string was valid.)
 244:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 245:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtoul() function return either the result of the conversion
 246:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     or, if there was a leading minus sign, the negation of the result
 247:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     of the conversion, unless the original (non-negated) value would
 248:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     overflow; in the latter case, strtoul() returns ULONG_MAX, and \c
 249:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     errno is set to \ref avr_errno "ERANGE".  If no conversion could 
 250:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     be performed, 0 is returned.
 251:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 252:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
 253:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 254:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 255:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atol() function converts the initial portion of the string
 256:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     pointed to by \p s to long integer representation. In contrast to
 257:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 258:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****         \code strtol(s, (char **)NULL, 10); \endcode
 259:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 260:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 261:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 262:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     stack) and works more quickly.
 263:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 264:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long atol(const char *__s) __ATTR_PURE__;
 265:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 266:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 267:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atoi() function converts the initial portion of the string
 268:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     pointed to by \p s to integer representation. In contrast to
 269:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 270:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****         \code (int)strtol(s, (char **)NULL, 10); \endcode
 271:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 272:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 273:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 274:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     stack) and works more quickly.
 275:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 276:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int atoi(const char *__s) __ATTR_PURE__;
 277:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 278:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 279:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The exit() function terminates the application.  Since there is no
 280:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    environment to return to, \c status is ignored, and code execution
 281:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    will eventually reach an infinite loop, thereby effectively halting
 282:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    all code processing.  Before entering the infinite loop, interrupts
 283:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    are globally disabled.
 284:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 285:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    In a C++ context, global destructors will be called before halting
 286:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    execution.
 287:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 288:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void exit(int __status) __ATTR_NORETURN__;
 289:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 290:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 291:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The malloc() function allocates \c size bytes of memory.
 292:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    If malloc() fails, a NULL pointer is returned.
 293:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 294:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Note that malloc() does \e not initialize the returned memory to
 295:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    zero bytes.
 296:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 297:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    See the chapter about \ref malloc "malloc() usage" for implementation
 298:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    details.
 299:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 300:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *malloc(size_t __size) __ATTR_MALLOC__;
 301:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 302:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 303:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The free() function causes the allocated memory referenced by \c
 304:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    ptr to be made available for future allocations.  If \c ptr is
 305:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    NULL, no action occurs.
 306:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 307:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void free(void *__ptr);
 308:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 309:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 310:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 311:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 312:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern size_t __malloc_margin;
 313:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 314:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 315:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 316:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 317:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *__malloc_heap_start;
 318:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 319:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 320:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 321:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 322:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *__malloc_heap_end;
 323:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 324:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 325:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Allocate \c nele elements of \c size each.  Identical to calling
 326:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() using <tt>nele * size</tt> as argument, except the
 327:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    allocated memory will be cleared to zero.
 328:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 329:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *calloc(size_t __nele, size_t __size) __ATTR_MALLOC__;
 330:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 331:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 332:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The realloc() function tries to change the size of the region
 333:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    allocated at \c ptr to the new \c size value.  It returns a
 334:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    pointer to the new region.  The returned pointer might be the
 335:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    same as the old pointer, or a pointer to a completely different
 336:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    region.
 337:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 338:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The contents of the returned region up to either the old or the new
 339:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    size value (whatever is less) will be identical to the contents of
 340:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    the old region, even in case a new region had to be allocated.
 341:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 342:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    It is acceptable to pass \c ptr as NULL, in which case realloc()
 343:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    will behave identical to malloc().
 344:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 345:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    If the new memory cannot be allocated, realloc() returns NULL, and
 346:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    the region at \c ptr will not be changed.
 347:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 348:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *realloc(void *__ptr, size_t __size) __ATTR_MALLOC__;
 349:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 350:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern double strtod(const char *__nptr, char **__endptr);
 351:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 352:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \ingroup avr_stdlib
 353:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     \fn  double atof (const char *nptr)
 354:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 355:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atof() function converts the initial portion of the string pointed
 356:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     to by \a nptr to double representation.
 357:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 358:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     It is equivalent to calling
 359:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	\code strtod(nptr, (char **)0); \endcode
 360:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****  */
 361:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern double atof(const char *__nptr);
 362:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 363:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Highest number that can be generated by rand(). */
 364:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	RAND_MAX 0x7FFF
 365:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 366:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 367:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The rand() function computes a sequence of pseudo-random integers in the
 368:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      range of 0 to \c RAND_MAX (as defined by the header file <stdlib.h>).
 369:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 370:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      The srand() function sets its argument \c seed as the seed for a new
 371:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      sequence of pseudo-random numbers to be returned by rand().  These
 372:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      sequences are repeatable by calling srand() with the same seed value.
 373:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 374:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      If no seed value is provided, the functions are automatically seeded with
 375:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      a value of 1.
 376:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 377:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      In compliance with the C standard, these functions operate on
 378:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      \c int arguments.  Since the underlying algorithm already uses
 379:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      32-bit calculations, this causes a loss of precision.  See
 380:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      \c random() for an alternate set of functions that retains full
 381:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****      32-bit precision.
 382:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 383:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int rand(void);
 384:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 385:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Pseudo-random number generator seeding; see rand().
 386:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 387:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void srand(unsigned int __seed);
 388:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 389:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 390:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Variant of rand() that stores the context in the user-supplied
 391:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    variable located at \c ctx instead of a static library variable
 392:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    so the function becomes re-entrant.
 393:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 394:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int rand_r(unsigned long *__ctx);
 395:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@}*/
 396:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 397:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@{*/
 398:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \name Non-standard (i.e. non-ISO C) functions.
 399:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****  \ingroup avr_stdlib
 400:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 401:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 402:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \brief Convert an integer to a string.
 403:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 404:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The function itoa() converts the integer value from \c val into an
 405:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    ASCII representation that will be stored under \c s.  The caller
 406:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    is responsible for providing sufficient storage in \c s.
 407:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 408:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The minimal size of the buffer \c s depends on the choice of
 409:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    radix. For example, if the radix is 2 (binary), you need to supply a buffer
 410:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    with a minimal length of 8 * sizeof (int) + 1 characters, i.e. one
 411:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    character for each bit plus one for the string terminator. Using a larger
 412:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    radix will require a smaller minimal buffer size.
 413:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 414:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \warning If the buffer is too small, you risk a buffer overflow.
 415:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 416:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    Conversion is done using the \c radix as base, which may be a
 417:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    number between 2 (binary conversion) and up to 36.  If \c radix
 418:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    is greater than 10, the next digit after \c '9' will be the letter
 419:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c 'a'.
 420:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     
 421:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     If radix is 10 and val is negative, a minus sign will be prepended.
 422:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 423:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****    The itoa() function returns the pointer passed as \c s.
 424:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 425:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifdef  __DOXYGEN__
 426:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *itoa(int val, char *s, int radix);
 427:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** #else
 428:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** extern __inline__ __ATTR_GNU_INLINE__
 429:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** char *itoa (int __val, char *__s, int __radix)
 430:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** {
 431:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     if (!__builtin_constant_p (__radix)) {
 432:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	extern char *__itoa (int, char *, int);
 433:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __itoa (__val, __s, __radix);
 434:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     } else if (__radix < 2 || __radix > 36) {
 435:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	*__s = 0;
 436:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __s;
 437:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h ****     } else {
 438:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	extern char *__itoa_ncheck (int, char *, unsigned char);
 439:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __itoa_ncheck (__val, __s, __radix);
 457               		.loc 3 439 0
 458 0000 4AE0      		ldi r20,lo8(10)
 459 0002 60E0      		ldi r22,lo8(msgg)
 460 0004 70E0      		ldi r23,hi8(msgg)
 461 0006 0E94 0000 		call __itoa_ncheck
 462               	.LVL23:
 463               	.LBE27:
 464               	.LBE26:
 200:../src/UART.c **** 	itoa(numero,msgg,10);
 201:../src/UART.c **** 	UART_putstring(msgg);
 465               		.loc 1 201 0
 466 000a 80E0      		ldi r24,lo8(msgg)
 467 000c 90E0      		ldi r25,hi8(msgg)
 468 000e 0E94 0000 		call UART_putstring
 469               	.LVL24:
 470 0012 0895      		ret
 471               		.cfi_endproc
 472               	.LFE21:
 474               		.comm	msgg,10,1
 475               		.comm	USART_ReceiveBuffer,1,1
 476               		.comm	USART_TransmitBuffer,1,1
 477               		.text
 478               	.Letext0:
 479               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 480               		.file 5 "../src/cqueue.h"
DEFINED SYMBOLS
                            *ABS*:00000000 UART.c
              UART.s:2      *ABS*:0000003e __SP_H__
              UART.s:3      *ABS*:0000003d __SP_L__
              UART.s:4      *ABS*:0000003f __SREG__
              UART.s:5      *ABS*:00000000 __tmp_reg__
              UART.s:6      *ABS*:00000001 __zero_reg__
              UART.s:13     .text.UART_Init:00000000 UART_Init
              UART.s:62     .text.UART_rx_status:00000000 UART_rx_status
              UART.s:81     .text.UART_get_data:00000000 UART_get_data
              UART.s:100    .text.UART_ReceivePolling:00000000 UART_ReceivePolling
              UART.s:128    .text.UART_TransmitPolling:00000000 UART_TransmitPolling
              UART.s:155    .text.UART_send_data:00000000 UART_send_data
              UART.s:174    .text.UART_putstring:00000000 UART_putstring
              UART.s:225    .text.uart_test:00000000 uart_test
              UART.s:267    .text.UART_TransmitInterrupt:00000000 UART_TransmitInterrupt
                            *COM*:00000001 USART_TransmitBuffer
              UART.s:293    .text.__vector_19:00000000 __vector_19
              UART.s:349    .text.__vector_18:00000000 __vector_18
              UART.s:445    .text.send_num:00000000 send_num
                            *COM*:0000000a msgg
                            *COM*:00000001 USART_ReceiveBuffer
                           .group:00000000 wm4.sfr_defs.h.36.473802ecbcb5d4d38de6c7efbfcd3c60
                           .group:00000000 wm4.stdint.h.41.052d062c327f27e210bb72c3d087afe5
                           .group:00000000 wm4.inttypes.h.96.afb9c4be73a069861f8689c997efc518
                           .group:00000000 wm4.sfr_defs.h.128.38ceebe2fb099c106e85a566519e0f1a
                           .group:00000000 wm4.iom328p.h.44.29c929f46483155923fc58520c74ebf7
                           .group:00000000 wm4.portpins.h.34.21289185946cbf62723ecc8db6cdc3ff
                           .group:00000000 wm4.common.h.35.c7e66042b2128622b9d3bddccc9a39f4
                           .group:00000000 wm4.version.h.54.85699b1a50c61c991a37d67b69e79e95
                           .group:00000000 wm4.fuse.h.36.5c373c650020c0efef2cbaa98ea802c3
                           .group:00000000 wm4.lock.h.36.51f311078904691e8f8c3d70111251d8
                           .group:00000000 wm4.delay.h.36.9b049a49ceee302c08fd72aec728bf54
                           .group:00000000 wm4.math.h.49.c8a36eddb532146e0bb8ca9326ea4652
                           .group:00000000 wm4.interrupt.h.36.b2193b640edda749ea0a45a8be5976c8
                           .group:00000000 wm4.stdlib.h.40.248a6087ef49adb4f4328833c0282d4b
                           .group:00000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:00000000 wm4.stdlib.h.51.b17834f4e5b9352d53ab037638bd1f7b
                           .group:00000000 wm4.string.h.41.8b0fd4b8464d7737ca6ec77d9c41c5e8
                           .group:00000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:00000000 wm4.cqueue.h.2.ddb4abc33b3476710e33c1abf058974f

UNDEFINED SYMBOLS
QueueInit
QueueStatus
PullQueue
PushQueue
__itoa_ncheck
__do_clear_bss
