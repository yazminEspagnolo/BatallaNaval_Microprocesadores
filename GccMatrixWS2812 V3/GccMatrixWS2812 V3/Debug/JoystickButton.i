# 1 "../src/JoystickButton.c"
# 1 "C:\\Users\\Michelle\\Music\\GccMatrixWS2812 V3\\GccMatrixWS2812 V3\\Debug//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_VERSION__ 199901L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 5
#define __GNUC_MINOR__ 4
#define __GNUC_PATCHLEVEL__ 0
#define __VERSION__ "5.4.0"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 2
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 4
#define __SIZEOF_LONG_DOUBLE__ 4
#define __SIZEOF_SIZE_T__ 2
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 1
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 2
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ int
#define __WINT_TYPE__ int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ char
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ long int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ long unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1009
#define __USING_SJLJ_EXCEPTIONS__ 1
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0x7fff
#define __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
#define __WINT_MAX__ 0x7fff
#define __WINT_MIN__ (-__WINT_MAX__ - 1)
#define __PTRDIFF_MAX__ 0x7fff
#define __SIZE_MAX__ 0xffffU
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 0x7f
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffffU
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffffU
#define __UINT16_C(c) c ## U
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7f
#define __INT_FAST16_MAX__ 0x7fff
#define __INT_FAST32_MAX__ 0x7fffffffL
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __UINT_FAST8_MAX__ 0xff
#define __UINT_FAST16_MAX__ 0xffffU
#define __UINT_FAST32_MAX__ 0xffffffffUL
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fff
#define __UINTPTR_MAX__ 0xffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282347e+38F
#define __FLT_MIN__ 1.17549435e-38F
#define __FLT_EPSILON__ 1.19209290e-7F
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 24
#define __DBL_DIG__ 6
#define __DBL_MIN_EXP__ (-125)
#define __DBL_MIN_10_EXP__ (-37)
#define __DBL_MAX_EXP__ 128
#define __DBL_MAX_10_EXP__ 38
#define __DBL_DECIMAL_DIG__ 9
#define __DBL_MAX__ ((double)3.40282347e+38L)
#define __DBL_MIN__ ((double)1.17549435e-38L)
#define __DBL_EPSILON__ ((double)1.19209290e-7L)
#define __DBL_DENORM_MIN__ ((double)1.40129846e-45L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 24
#define __LDBL_DIG__ 6
#define __LDBL_MIN_EXP__ (-125)
#define __LDBL_MIN_10_EXP__ (-37)
#define __LDBL_MAX_EXP__ 128
#define __LDBL_MAX_10_EXP__ 38
#define __DECIMAL_DIG__ 9
#define __LDBL_MAX__ 3.40282347e+38L
#define __LDBL_MIN__ 1.17549435e-38L
#define __LDBL_EPSILON__ 1.19209290e-7L
#define __LDBL_DENORM_MIN__ 1.40129846e-45L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __SFRACT_FBIT__ 7
#define __SFRACT_IBIT__ 0
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
#define __SFRACT_MAX__ 0X7FP-7HR
#define __SFRACT_EPSILON__ 0x1P-7HR
#define __USFRACT_FBIT__ 8
#define __USFRACT_IBIT__ 0
#define __USFRACT_MIN__ 0.0UHR
#define __USFRACT_MAX__ 0XFFP-8UHR
#define __USFRACT_EPSILON__ 0x1P-8UHR
#define __FRACT_FBIT__ 15
#define __FRACT_IBIT__ 0
#define __FRACT_MIN__ (-0.5R-0.5R)
#define __FRACT_MAX__ 0X7FFFP-15R
#define __FRACT_EPSILON__ 0x1P-15R
#define __UFRACT_FBIT__ 16
#define __UFRACT_IBIT__ 0
#define __UFRACT_MIN__ 0.0UR
#define __UFRACT_MAX__ 0XFFFFP-16UR
#define __UFRACT_EPSILON__ 0x1P-16UR
#define __LFRACT_FBIT__ 31
#define __LFRACT_IBIT__ 0
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
#define __LFRACT_EPSILON__ 0x1P-31LR
#define __ULFRACT_FBIT__ 32
#define __ULFRACT_IBIT__ 0
#define __ULFRACT_MIN__ 0.0ULR
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
#define __ULFRACT_EPSILON__ 0x1P-32ULR
#define __LLFRACT_FBIT__ 63
#define __LLFRACT_IBIT__ 0
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
#define __LLFRACT_EPSILON__ 0x1P-63LLR
#define __ULLFRACT_FBIT__ 64
#define __ULLFRACT_IBIT__ 0
#define __ULLFRACT_MIN__ 0.0ULLR
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
#define __SACCUM_FBIT__ 7
#define __SACCUM_IBIT__ 8
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
#define __SACCUM_MAX__ 0X7FFFP-7HK
#define __SACCUM_EPSILON__ 0x1P-7HK
#define __USACCUM_FBIT__ 8
#define __USACCUM_IBIT__ 8
#define __USACCUM_MIN__ 0.0UHK
#define __USACCUM_MAX__ 0XFFFFP-8UHK
#define __USACCUM_EPSILON__ 0x1P-8UHK
#define __ACCUM_FBIT__ 15
#define __ACCUM_IBIT__ 16
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
#define __ACCUM_EPSILON__ 0x1P-15K
#define __UACCUM_FBIT__ 16
#define __UACCUM_IBIT__ 16
#define __UACCUM_MIN__ 0.0UK
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
#define __UACCUM_EPSILON__ 0x1P-16UK
#define __LACCUM_FBIT__ 31
#define __LACCUM_IBIT__ 32
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
#define __LACCUM_EPSILON__ 0x1P-31LK
#define __ULACCUM_FBIT__ 32
#define __ULACCUM_IBIT__ 32
#define __ULACCUM_MIN__ 0.0ULK
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
#define __ULACCUM_EPSILON__ 0x1P-32ULK
#define __LLACCUM_FBIT__ 47
#define __LLACCUM_IBIT__ 16
#define __LLACCUM_MIN__ (-0X1P15LLK-0X1P15LLK)
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-47LLK
#define __LLACCUM_EPSILON__ 0x1P-47LLK
#define __ULLACCUM_FBIT__ 48
#define __ULLACCUM_IBIT__ 16
#define __ULLACCUM_MIN__ 0.0ULLK
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-48ULLK
#define __ULLACCUM_EPSILON__ 0x1P-48ULLK
#define __QQ_FBIT__ 7
#define __QQ_IBIT__ 0
#define __HQ_FBIT__ 15
#define __HQ_IBIT__ 0
#define __SQ_FBIT__ 31
#define __SQ_IBIT__ 0
#define __DQ_FBIT__ 63
#define __DQ_IBIT__ 0
#define __TQ_FBIT__ 127
#define __TQ_IBIT__ 0
#define __UQQ_FBIT__ 8
#define __UQQ_IBIT__ 0
#define __UHQ_FBIT__ 16
#define __UHQ_IBIT__ 0
#define __USQ_FBIT__ 32
#define __USQ_IBIT__ 0
#define __UDQ_FBIT__ 64
#define __UDQ_IBIT__ 0
#define __UTQ_FBIT__ 128
#define __UTQ_IBIT__ 0
#define __HA_FBIT__ 7
#define __HA_IBIT__ 8
#define __SA_FBIT__ 15
#define __SA_IBIT__ 16
#define __DA_FBIT__ 31
#define __DA_IBIT__ 32
#define __TA_FBIT__ 47
#define __TA_IBIT__ 16
#define __UHA_FBIT__ 8
#define __UHA_IBIT__ 8
#define __USA_FBIT__ 16
#define __USA_IBIT__ 16
#define __UDA_FBIT__ 32
#define __UDA_IBIT__ 32
#define __UTA_FBIT__ 48
#define __UTA_IBIT__ 16
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 1
#define __GCC_ATOMIC_SHORT_LOCK_FREE 1
#define __GCC_ATOMIC_INT_LOCK_FREE 1
#define __GCC_ATOMIC_LONG_LOCK_FREE 1
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 2
#define __SIZEOF_PTRDIFF_T__ 2
#define __AVR 1
#define __AVR__ 1
#define AVR 1
#define __AVR_ARCH__ 5
#define __AVR_HAVE_MOVW__ 1
#define __AVR_HAVE_LPMX__ 1
#define __AVR_ENHANCED__ 1
#define __AVR_HAVE_MUL__ 1
#define __AVR_HAVE_JMP_CALL__ 1
#define __AVR_MEGA__ 1
#define __AVR_2_BYTE_PC__ 1
#define __AVR_HAVE_16BIT_SP__ 1
#define __AVR_HAVE_SPH__ 1
#define __AVR_SFR_OFFSET__ 0x20
#define __WITH_AVRLIBC__ 1
#define __FLASH 1
#define __MEMX 1
#define __BUILTIN_AVR_NOP 1
#define __BUILTIN_AVR_SEI 1
#define __BUILTIN_AVR_CLI 1
#define __BUILTIN_AVR_WDR 1
#define __BUILTIN_AVR_SLEEP 1
#define __BUILTIN_AVR_SWAP 1
#define __BUILTIN_AVR_FMUL 1
#define __BUILTIN_AVR_FMULS 1
#define __BUILTIN_AVR_FMULSU 1
#define __BUILTIN_AVR_DELAY_CYCLES 1
#define __BUILTIN_AVR_INSERT_BITS 1
#define __BUILTIN_AVR_FLASH_SEGMENT 1
#define __BUILTIN_AVR_ABSHR 1
#define __BUILTIN_AVR_ABSR 1
#define __BUILTIN_AVR_ABSLR 1
#define __BUILTIN_AVR_ABSLLR 1
#define __BUILTIN_AVR_ABSHK 1
#define __BUILTIN_AVR_ABSK 1
#define __BUILTIN_AVR_ABSLK 1
#define __BUILTIN_AVR_ABSLLK 1
#define __BUILTIN_AVR_ROUNDHR 1
#define __BUILTIN_AVR_ROUNDR 1
#define __BUILTIN_AVR_ROUNDLR 1
#define __BUILTIN_AVR_ROUNDLLR 1
#define __BUILTIN_AVR_ROUNDUHR 1
#define __BUILTIN_AVR_ROUNDUR 1
#define __BUILTIN_AVR_ROUNDULR 1
#define __BUILTIN_AVR_ROUNDULLR 1
#define __BUILTIN_AVR_ROUNDHK 1
#define __BUILTIN_AVR_ROUNDK 1
#define __BUILTIN_AVR_ROUNDLK 1
#define __BUILTIN_AVR_ROUNDLLK 1
#define __BUILTIN_AVR_ROUNDUHK 1
#define __BUILTIN_AVR_ROUNDUK 1
#define __BUILTIN_AVR_ROUNDULK 1
#define __BUILTIN_AVR_ROUNDULLK 1
#define __BUILTIN_AVR_COUNTLSHR 1
#define __BUILTIN_AVR_COUNTLSR 1
#define __BUILTIN_AVR_COUNTLSLR 1
#define __BUILTIN_AVR_COUNTLSLLR 1
#define __BUILTIN_AVR_COUNTLSUHR 1
#define __BUILTIN_AVR_COUNTLSUR 1
#define __BUILTIN_AVR_COUNTLSULR 1
#define __BUILTIN_AVR_COUNTLSULLR 1
#define __BUILTIN_AVR_COUNTLSHK 1
#define __BUILTIN_AVR_COUNTLSK 1
#define __BUILTIN_AVR_COUNTLSLK 1
#define __BUILTIN_AVR_COUNTLSLLK 1
#define __BUILTIN_AVR_COUNTLSUHK 1
#define __BUILTIN_AVR_COUNTLSUK 1
#define __BUILTIN_AVR_COUNTLSULK 1
#define __BUILTIN_AVR_COUNTLSULLK 1
#define __BUILTIN_AVR_BITSHR 1
#define __BUILTIN_AVR_BITSR 1
#define __BUILTIN_AVR_BITSLR 1
#define __BUILTIN_AVR_BITSLLR 1
#define __BUILTIN_AVR_BITSUHR 1
#define __BUILTIN_AVR_BITSUR 1
#define __BUILTIN_AVR_BITSULR 1
#define __BUILTIN_AVR_BITSULLR 1
#define __BUILTIN_AVR_BITSHK 1
#define __BUILTIN_AVR_BITSK 1
#define __BUILTIN_AVR_BITSLK 1
#define __BUILTIN_AVR_BITSLLK 1
#define __BUILTIN_AVR_BITSUHK 1
#define __BUILTIN_AVR_BITSUK 1
#define __BUILTIN_AVR_BITSULK 1
#define __BUILTIN_AVR_BITSULLK 1
#define __BUILTIN_AVR_HRBITS 1
#define __BUILTIN_AVR_RBITS 1
#define __BUILTIN_AVR_LRBITS 1
#define __BUILTIN_AVR_LLRBITS 1
#define __BUILTIN_AVR_UHRBITS 1
#define __BUILTIN_AVR_URBITS 1
#define __BUILTIN_AVR_ULRBITS 1
#define __BUILTIN_AVR_ULLRBITS 1
#define __BUILTIN_AVR_HKBITS 1
#define __BUILTIN_AVR_KBITS 1
#define __BUILTIN_AVR_LKBITS 1
#define __BUILTIN_AVR_LLKBITS 1
#define __BUILTIN_AVR_UHKBITS 1
#define __BUILTIN_AVR_UKBITS 1
#define __BUILTIN_AVR_ULKBITS 1
#define __BUILTIN_AVR_ULLKBITS 1
#define __BUILTIN_AVR_ABSFX 1
#define __BUILTIN_AVR_ROUNDFX 1
#define __BUILTIN_AVR_COUNTLSFX 1
#define __INT24_MAX__ 8388607L
#define __INT24_MIN__ (-__INT24_MAX__-1)
#define __UINT24_MAX__ 16777215UL
#define __ELF__ 1
# 1 "<command-line>"
#define __AVR_ATmega328P__ 1
#define __AVR_DEVICE_NAME__ atmega328p
#define __AVR_DEV_LIB_NAME__ m328p
#define DEBUG 1
#define BOARD ATMEGA328P_XPLAINED_MINI
# 1 "../src/JoystickButton.c"
# 1 "../src/asf.h" 1
# 45 "../src/asf.h"
#define ASF_H 
# 56 "../src/asf.h"
# 1 "../src/ASF/common/services/gpio/gpio.h" 1
# 37 "../src/ASF/common/services/gpio/gpio.h"
#define _GPIO_H_ 

# 1 "../src/ASF/common/utils/parts.h" 1
# 38 "../src/ASF/common/utils/parts.h"
#define ATMEL_PARTS_H 
# 55 "../src/ASF/common/utils/parts.h"
#define AVR8_PART_IS_DEFINED(part) (defined(__ ## part ## __) || defined(__AVR_ ## part ## __))



#define AVR32_PART_IS_DEFINED(part) (defined(__AT32 ## part ## __) || defined(__AVR32_ ## part ## __))



#define SAM_PART_IS_DEFINED(part) (defined(__ ## part ## __))
# 75 "../src/ASF/common/utils/parts.h"
#define UC3A0 ( AVR32_PART_IS_DEFINED(UC3A0128) || AVR32_PART_IS_DEFINED(UC3A0256) || AVR32_PART_IS_DEFINED(UC3A0512) )





#define UC3A1 ( AVR32_PART_IS_DEFINED(UC3A1128) || AVR32_PART_IS_DEFINED(UC3A1256) || AVR32_PART_IS_DEFINED(UC3A1512) )





#define UC3A3 ( AVR32_PART_IS_DEFINED(UC3A364) || AVR32_PART_IS_DEFINED(UC3A364S) || AVR32_PART_IS_DEFINED(UC3A3128) || AVR32_PART_IS_DEFINED(UC3A3128S) || AVR32_PART_IS_DEFINED(UC3A3256) || AVR32_PART_IS_DEFINED(UC3A3256S) )
# 96 "../src/ASF/common/utils/parts.h"
#define UC3A4 ( AVR32_PART_IS_DEFINED(UC3A464) || AVR32_PART_IS_DEFINED(UC3A464S) || AVR32_PART_IS_DEFINED(UC3A4128) || AVR32_PART_IS_DEFINED(UC3A4128S) || AVR32_PART_IS_DEFINED(UC3A4256) || AVR32_PART_IS_DEFINED(UC3A4256S) )
# 110 "../src/ASF/common/utils/parts.h"
#define UC3B0 ( AVR32_PART_IS_DEFINED(UC3B064) || AVR32_PART_IS_DEFINED(UC3B0128) || AVR32_PART_IS_DEFINED(UC3B0256) || AVR32_PART_IS_DEFINED(UC3B0512) )






#define UC3B1 ( AVR32_PART_IS_DEFINED(UC3B164) || AVR32_PART_IS_DEFINED(UC3B1128) || AVR32_PART_IS_DEFINED(UC3B1256) || AVR32_PART_IS_DEFINED(UC3B1512) )
# 129 "../src/ASF/common/utils/parts.h"
#define UC3C0 ( AVR32_PART_IS_DEFINED(UC3C064C) || AVR32_PART_IS_DEFINED(UC3C0128C) || AVR32_PART_IS_DEFINED(UC3C0256C) || AVR32_PART_IS_DEFINED(UC3C0512C) )






#define UC3C1 ( AVR32_PART_IS_DEFINED(UC3C164C) || AVR32_PART_IS_DEFINED(UC3C1128C) || AVR32_PART_IS_DEFINED(UC3C1256C) || AVR32_PART_IS_DEFINED(UC3C1512C) )






#define UC3C2 ( AVR32_PART_IS_DEFINED(UC3C264C) || AVR32_PART_IS_DEFINED(UC3C2128C) || AVR32_PART_IS_DEFINED(UC3C2256C) || AVR32_PART_IS_DEFINED(UC3C2512C) )
# 155 "../src/ASF/common/utils/parts.h"
#define UC3D3 ( AVR32_PART_IS_DEFINED(UC64D3) || AVR32_PART_IS_DEFINED(UC128D3) )




#define UC3D4 ( AVR32_PART_IS_DEFINED(UC64D4) || AVR32_PART_IS_DEFINED(UC128D4) )
# 170 "../src/ASF/common/utils/parts.h"
#define UC3L0 ( AVR32_PART_IS_DEFINED(UC3L016) || AVR32_PART_IS_DEFINED(UC3L032) || AVR32_PART_IS_DEFINED(UC3L064) )





#define UC3L0128 ( AVR32_PART_IS_DEFINED(UC3L0128) )



#define UC3L0256 ( AVR32_PART_IS_DEFINED(UC3L0256) )



#define UC3L3 ( AVR32_PART_IS_DEFINED(UC64L3U) || AVR32_PART_IS_DEFINED(UC128L3U) || AVR32_PART_IS_DEFINED(UC256L3U) )





#define UC3L4 ( AVR32_PART_IS_DEFINED(UC64L4U) || AVR32_PART_IS_DEFINED(UC128L4U) || AVR32_PART_IS_DEFINED(UC256L4U) )





#define UC3L3_L4 (UC3L3 || UC3L4)







#define UC3A (UC3A0 || UC3A1 || UC3A3 || UC3A4)


#define UC3B (UC3B0 || UC3B1)


#define UC3C (UC3C0 || UC3C1 || UC3C2)


#define UC3D (UC3D3 || UC3D4)


#define UC3L (UC3L0 || UC3L0128 || UC3L0256 || UC3L3_L4)



#define UC3 (UC3A || UC3B || UC3C || UC3D || UC3L)
# 233 "../src/ASF/common/utils/parts.h"
#define XMEGA_A1 ( AVR8_PART_IS_DEFINED(ATxmega64A1) || AVR8_PART_IS_DEFINED(ATxmega128A1) )




#define XMEGA_A3 ( AVR8_PART_IS_DEFINED(ATxmega64A3) || AVR8_PART_IS_DEFINED(ATxmega128A3) || AVR8_PART_IS_DEFINED(ATxmega192A3) || AVR8_PART_IS_DEFINED(ATxmega256A3) )






#define XMEGA_A3B ( AVR8_PART_IS_DEFINED(ATxmega256A3B) )



#define XMEGA_A4 ( AVR8_PART_IS_DEFINED(ATxmega16A4) || AVR8_PART_IS_DEFINED(ATxmega32A4) )
# 259 "../src/ASF/common/utils/parts.h"
#define XMEGA_A1U ( AVR8_PART_IS_DEFINED(ATxmega64A1U) || AVR8_PART_IS_DEFINED(ATxmega128A1U) )




#define XMEGA_A3U ( AVR8_PART_IS_DEFINED(ATxmega64A3U) || AVR8_PART_IS_DEFINED(ATxmega128A3U) || AVR8_PART_IS_DEFINED(ATxmega192A3U) || AVR8_PART_IS_DEFINED(ATxmega256A3U) )






#define XMEGA_A3BU ( AVR8_PART_IS_DEFINED(ATxmega256A3BU) )



#define XMEGA_A4U ( AVR8_PART_IS_DEFINED(ATxmega16A4U) || AVR8_PART_IS_DEFINED(ATxmega32A4U) || AVR8_PART_IS_DEFINED(ATxmega64A4U) || AVR8_PART_IS_DEFINED(ATxmega128A4U) )
# 287 "../src/ASF/common/utils/parts.h"
#define XMEGA_B1 ( AVR8_PART_IS_DEFINED(ATxmega64B1) || AVR8_PART_IS_DEFINED(ATxmega128B1) )




#define XMEGA_B3 ( AVR8_PART_IS_DEFINED(ATxmega64B3) || AVR8_PART_IS_DEFINED(ATxmega128B3) )
# 302 "../src/ASF/common/utils/parts.h"
#define XMEGA_C3 ( AVR8_PART_IS_DEFINED(ATxmega384C3) || AVR8_PART_IS_DEFINED(ATxmega256C3) || AVR8_PART_IS_DEFINED(ATxmega192C3) || AVR8_PART_IS_DEFINED(ATxmega128C3) || AVR8_PART_IS_DEFINED(ATxmega64C3) || AVR8_PART_IS_DEFINED(ATxmega32C3) )
# 311 "../src/ASF/common/utils/parts.h"
#define XMEGA_C4 ( AVR8_PART_IS_DEFINED(ATxmega32C4) || AVR8_PART_IS_DEFINED(ATxmega16C4) )
# 321 "../src/ASF/common/utils/parts.h"
#define XMEGA_D3 ( AVR8_PART_IS_DEFINED(ATxmega32D3) || AVR8_PART_IS_DEFINED(ATxmega64D3) || AVR8_PART_IS_DEFINED(ATxmega128D3) || AVR8_PART_IS_DEFINED(ATxmega192D3) || AVR8_PART_IS_DEFINED(ATxmega256D3) || AVR8_PART_IS_DEFINED(ATxmega384D3) )
# 330 "../src/ASF/common/utils/parts.h"
#define XMEGA_D4 ( AVR8_PART_IS_DEFINED(ATxmega16D4) || AVR8_PART_IS_DEFINED(ATxmega32D4) || AVR8_PART_IS_DEFINED(ATxmega64D4) || AVR8_PART_IS_DEFINED(ATxmega128D4) )
# 342 "../src/ASF/common/utils/parts.h"
#define XMEGA_E5 ( AVR8_PART_IS_DEFINED(ATxmega8E5) || AVR8_PART_IS_DEFINED(ATxmega16E5) || AVR8_PART_IS_DEFINED(ATxmega32E5) )
# 355 "../src/ASF/common/utils/parts.h"
#define XMEGA_A (XMEGA_A1 || XMEGA_A3 || XMEGA_A3B || XMEGA_A4)


#define XMEGA_AU (XMEGA_A1U || XMEGA_A3U || XMEGA_A3BU || XMEGA_A4U)


#define XMEGA_B (XMEGA_B1 || XMEGA_B3)


#define XMEGA_C (XMEGA_C3 || XMEGA_C4)


#define XMEGA_D (XMEGA_D3 || XMEGA_D4)


#define XMEGA_E (XMEGA_E5)




#define XMEGA (XMEGA_A || XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_D || XMEGA_E)
# 393 "../src/ASF/common/utils/parts.h"
#define MEGA_XX0 ( AVR8_PART_IS_DEFINED(ATmega640) || AVR8_PART_IS_DEFINED(ATmega1280) || AVR8_PART_IS_DEFINED(ATmega2560) )





#define MEGA_XX1 ( AVR8_PART_IS_DEFINED(ATmega1281) || AVR8_PART_IS_DEFINED(ATmega2561) )
# 410 "../src/ASF/common/utils/parts.h"
#define MEGA_XX0_1 (MEGA_XX0 || MEGA_XX1)


#define MEGA_XX4 ( AVR8_PART_IS_DEFINED(ATmega164A) || AVR8_PART_IS_DEFINED(ATmega164PA) || AVR8_PART_IS_DEFINED(ATmega324A) || AVR8_PART_IS_DEFINED(ATmega324PA) || AVR8_PART_IS_DEFINED(ATmega324PB) || AVR8_PART_IS_DEFINED(ATmega644) || AVR8_PART_IS_DEFINED(ATmega644A) || AVR8_PART_IS_DEFINED(ATmega644PA) || AVR8_PART_IS_DEFINED(ATmega1284P) || AVR8_PART_IS_DEFINED(ATmega128RFA1) )
# 427 "../src/ASF/common/utils/parts.h"
#define MEGA_XX4_A ( AVR8_PART_IS_DEFINED(ATmega164A) || AVR8_PART_IS_DEFINED(ATmega164PA) || AVR8_PART_IS_DEFINED(ATmega324A) || AVR8_PART_IS_DEFINED(ATmega324PA) || AVR8_PART_IS_DEFINED(ATmega644A) || AVR8_PART_IS_DEFINED(ATmega644PA) || AVR8_PART_IS_DEFINED(ATmega1284P) )
# 438 "../src/ASF/common/utils/parts.h"
#define MEGA_XX8 ( AVR8_PART_IS_DEFINED(ATmega48) || AVR8_PART_IS_DEFINED(ATmega48A) || AVR8_PART_IS_DEFINED(ATmega48PA) || AVR8_PART_IS_DEFINED(ATmega48PB) || AVR8_PART_IS_DEFINED(ATmega88) || AVR8_PART_IS_DEFINED(ATmega88A) || AVR8_PART_IS_DEFINED(ATmega88PA) || AVR8_PART_IS_DEFINED(ATmega88PB) || AVR8_PART_IS_DEFINED(ATmega168) || AVR8_PART_IS_DEFINED(ATmega168A) || AVR8_PART_IS_DEFINED(ATmega168PA) || AVR8_PART_IS_DEFINED(ATmega168PB) || AVR8_PART_IS_DEFINED(ATmega328) || AVR8_PART_IS_DEFINED(ATmega328P) || AVR8_PART_IS_DEFINED(ATmega328PB) )
# 457 "../src/ASF/common/utils/parts.h"
#define MEGA_XX8_A ( AVR8_PART_IS_DEFINED(ATmega48A) || AVR8_PART_IS_DEFINED(ATmega48PA) || AVR8_PART_IS_DEFINED(ATmega88A) || AVR8_PART_IS_DEFINED(ATmega88PA) || AVR8_PART_IS_DEFINED(ATmega168A) || AVR8_PART_IS_DEFINED(ATmega168PA) || AVR8_PART_IS_DEFINED(ATmega328P) )
# 468 "../src/ASF/common/utils/parts.h"
#define MEGA_XX ( AVR8_PART_IS_DEFINED(ATmega16) || AVR8_PART_IS_DEFINED(ATmega16A) || AVR8_PART_IS_DEFINED(ATmega32) || AVR8_PART_IS_DEFINED(ATmega32A) || AVR8_PART_IS_DEFINED(ATmega64) || AVR8_PART_IS_DEFINED(ATmega64A) || AVR8_PART_IS_DEFINED(ATmega128) || AVR8_PART_IS_DEFINED(ATmega128A) )
# 480 "../src/ASF/common/utils/parts.h"
#define MEGA_XX_A ( AVR8_PART_IS_DEFINED(ATmega16A) || AVR8_PART_IS_DEFINED(ATmega32A) || AVR8_PART_IS_DEFINED(ATmega64A) || AVR8_PART_IS_DEFINED(ATmega128A) )






#define MEGA_RFA1 ( AVR8_PART_IS_DEFINED(ATmega128RFA1) )




#define MEGA_RFR2 ( AVR8_PART_IS_DEFINED(ATmega64RFR2) || AVR8_PART_IS_DEFINED(ATmega128RFR2) || AVR8_PART_IS_DEFINED(ATmega256RFR2) || AVR8_PART_IS_DEFINED(ATmega644RFR2) || AVR8_PART_IS_DEFINED(ATmega1284RFR2) || AVR8_PART_IS_DEFINED(ATmega2564RFR2) )
# 503 "../src/ASF/common/utils/parts.h"
#define MEGA_RF (MEGA_RFA1 || MEGA_RFR2)





#define MEGA_XX_UN0 ( AVR8_PART_IS_DEFINED(ATmega16) || AVR8_PART_IS_DEFINED(ATmega16A) || AVR8_PART_IS_DEFINED(ATmega32) || AVR8_PART_IS_DEFINED(ATmega32A) )
# 519 "../src/ASF/common/utils/parts.h"
#define MEGA_XX_UN1 ( AVR8_PART_IS_DEFINED(ATmega64) || AVR8_PART_IS_DEFINED(ATmega64A) || AVR8_PART_IS_DEFINED(ATmega128) || AVR8_PART_IS_DEFINED(ATmega128A) )
# 529 "../src/ASF/common/utils/parts.h"
#define MEGA_XX_UN2 ( AVR8_PART_IS_DEFINED(ATmega169P) || AVR8_PART_IS_DEFINED(ATmega169PA) || AVR8_PART_IS_DEFINED(ATmega329P) || AVR8_PART_IS_DEFINED(ATmega329PA) )
# 540 "../src/ASF/common/utils/parts.h"
#define MEGA_UNCATEGORIZED ( AVR8_PART_IS_DEFINED(AT90CAN128) || AVR8_PART_IS_DEFINED(AT90CAN32) || AVR8_PART_IS_DEFINED(AT90CAN64) || AVR8_PART_IS_DEFINED(AT90PWM1) || AVR8_PART_IS_DEFINED(AT90PWM216) || AVR8_PART_IS_DEFINED(AT90PWM2B) || AVR8_PART_IS_DEFINED(AT90PWM316) || AVR8_PART_IS_DEFINED(AT90PWM3B) || AVR8_PART_IS_DEFINED(AT90PWM81) || AVR8_PART_IS_DEFINED(AT90USB1286) || AVR8_PART_IS_DEFINED(AT90USB1287) || AVR8_PART_IS_DEFINED(AT90USB162) || AVR8_PART_IS_DEFINED(AT90USB646) || AVR8_PART_IS_DEFINED(AT90USB647) || AVR8_PART_IS_DEFINED(AT90USB82) || AVR8_PART_IS_DEFINED(ATmega1284) || AVR8_PART_IS_DEFINED(ATmega162) || AVR8_PART_IS_DEFINED(ATmega164P) || AVR8_PART_IS_DEFINED(ATmega165A) || AVR8_PART_IS_DEFINED(ATmega165P) || AVR8_PART_IS_DEFINED(ATmega165PA) || AVR8_PART_IS_DEFINED(ATmega168P) || AVR8_PART_IS_DEFINED(ATmega169A) || AVR8_PART_IS_DEFINED(ATmega16M1) || AVR8_PART_IS_DEFINED(ATmega16U2) || AVR8_PART_IS_DEFINED(ATmega16U4) || AVR8_PART_IS_DEFINED(ATmega256RFA2) || AVR8_PART_IS_DEFINED(ATmega324P) || AVR8_PART_IS_DEFINED(ATmega325) || AVR8_PART_IS_DEFINED(ATmega3250) || AVR8_PART_IS_DEFINED(ATmega3250A) || AVR8_PART_IS_DEFINED(ATmega3250P) || AVR8_PART_IS_DEFINED(ATmega3250PA) || AVR8_PART_IS_DEFINED(ATmega325A) || AVR8_PART_IS_DEFINED(ATmega325P) || AVR8_PART_IS_DEFINED(ATmega325PA) || AVR8_PART_IS_DEFINED(ATmega329) || AVR8_PART_IS_DEFINED(ATmega3290) || AVR8_PART_IS_DEFINED(ATmega3290A) || AVR8_PART_IS_DEFINED(ATmega3290P) || AVR8_PART_IS_DEFINED(ATmega3290PA) || AVR8_PART_IS_DEFINED(ATmega329A) || AVR8_PART_IS_DEFINED(ATmega32M1) || AVR8_PART_IS_DEFINED(ATmega32U2) || AVR8_PART_IS_DEFINED(ATmega32U4) || AVR8_PART_IS_DEFINED(ATmega48P) || AVR8_PART_IS_DEFINED(ATmega644P) || AVR8_PART_IS_DEFINED(ATmega645) || AVR8_PART_IS_DEFINED(ATmega6450) || AVR8_PART_IS_DEFINED(ATmega6450A) || AVR8_PART_IS_DEFINED(ATmega6450P) || AVR8_PART_IS_DEFINED(ATmega645A) || AVR8_PART_IS_DEFINED(ATmega645P) || AVR8_PART_IS_DEFINED(ATmega649) || AVR8_PART_IS_DEFINED(ATmega6490) || AVR8_PART_IS_DEFINED(ATmega6490A) || AVR8_PART_IS_DEFINED(ATmega6490P) || AVR8_PART_IS_DEFINED(ATmega649A) || AVR8_PART_IS_DEFINED(ATmega649P) || AVR8_PART_IS_DEFINED(ATmega64M1) || AVR8_PART_IS_DEFINED(ATmega64RFA2) || AVR8_PART_IS_DEFINED(ATmega8) || AVR8_PART_IS_DEFINED(ATmega8515) || AVR8_PART_IS_DEFINED(ATmega8535) || AVR8_PART_IS_DEFINED(ATmega88P) || AVR8_PART_IS_DEFINED(ATmega8A) || AVR8_PART_IS_DEFINED(ATmega8U2) )
# 611 "../src/ASF/common/utils/parts.h"
#define MEGA_UNSPECIFIED (MEGA_XX_UN0 || MEGA_XX_UN1 || MEGA_XX_UN2 || MEGA_UNCATEGORIZED)





#define MEGA (MEGA_XX0_1 || MEGA_XX4 || MEGA_XX8 || MEGA_XX || MEGA_RF || MEGA_UNSPECIFIED)
# 631 "../src/ASF/common/utils/parts.h"
#define SAM3S1 ( SAM_PART_IS_DEFINED(SAM3S1A) || SAM_PART_IS_DEFINED(SAM3S1B) || SAM_PART_IS_DEFINED(SAM3S1C) )





#define SAM3S2 ( SAM_PART_IS_DEFINED(SAM3S2A) || SAM_PART_IS_DEFINED(SAM3S2B) || SAM_PART_IS_DEFINED(SAM3S2C) )





#define SAM3S4 ( SAM_PART_IS_DEFINED(SAM3S4A) || SAM_PART_IS_DEFINED(SAM3S4B) || SAM_PART_IS_DEFINED(SAM3S4C) )





#define SAM3S8 ( SAM_PART_IS_DEFINED(SAM3S8B) || SAM_PART_IS_DEFINED(SAM3S8C) )




#define SAM3SD8 ( SAM_PART_IS_DEFINED(SAM3SD8B) || SAM_PART_IS_DEFINED(SAM3SD8C) )
# 664 "../src/ASF/common/utils/parts.h"
#define SAM3U1 ( SAM_PART_IS_DEFINED(SAM3U1C) || SAM_PART_IS_DEFINED(SAM3U1E) )




#define SAM3U2 ( SAM_PART_IS_DEFINED(SAM3U2C) || SAM_PART_IS_DEFINED(SAM3U2E) )




#define SAM3U4 ( SAM_PART_IS_DEFINED(SAM3U4C) || SAM_PART_IS_DEFINED(SAM3U4E) )
# 684 "../src/ASF/common/utils/parts.h"
#define SAM3N00 ( SAM_PART_IS_DEFINED(SAM3N00A) || SAM_PART_IS_DEFINED(SAM3N00B) )




#define SAM3N0 ( SAM_PART_IS_DEFINED(SAM3N0A) || SAM_PART_IS_DEFINED(SAM3N0B) || SAM_PART_IS_DEFINED(SAM3N0C) )





#define SAM3N1 ( SAM_PART_IS_DEFINED(SAM3N1A) || SAM_PART_IS_DEFINED(SAM3N1B) || SAM_PART_IS_DEFINED(SAM3N1C) )





#define SAM3N2 ( SAM_PART_IS_DEFINED(SAM3N2A) || SAM_PART_IS_DEFINED(SAM3N2B) || SAM_PART_IS_DEFINED(SAM3N2C) )





#define SAM3N4 ( SAM_PART_IS_DEFINED(SAM3N4A) || SAM_PART_IS_DEFINED(SAM3N4B) || SAM_PART_IS_DEFINED(SAM3N4C) )
# 718 "../src/ASF/common/utils/parts.h"
#define SAM3X4 ( SAM_PART_IS_DEFINED(SAM3X4C) || SAM_PART_IS_DEFINED(SAM3X4E) )




#define SAM3X8 ( SAM_PART_IS_DEFINED(SAM3X8C) || SAM_PART_IS_DEFINED(SAM3X8E) || SAM_PART_IS_DEFINED(SAM3X8H) )
# 734 "../src/ASF/common/utils/parts.h"
#define SAM3A4 ( SAM_PART_IS_DEFINED(SAM3A4C) )



#define SAM3A8 ( SAM_PART_IS_DEFINED(SAM3A8C) )
# 747 "../src/ASF/common/utils/parts.h"
#define SAM4S2 ( SAM_PART_IS_DEFINED(SAM4S2A) || SAM_PART_IS_DEFINED(SAM4S2B) || SAM_PART_IS_DEFINED(SAM4S2C) )





#define SAM4S4 ( SAM_PART_IS_DEFINED(SAM4S4A) || SAM_PART_IS_DEFINED(SAM4S4B) || SAM_PART_IS_DEFINED(SAM4S4C) )





#define SAM4S8 ( SAM_PART_IS_DEFINED(SAM4S8B) || SAM_PART_IS_DEFINED(SAM4S8C) )




#define SAM4S16 ( SAM_PART_IS_DEFINED(SAM4S16B) || SAM_PART_IS_DEFINED(SAM4S16C) )




#define SAM4SA16 ( SAM_PART_IS_DEFINED(SAM4SA16B) || SAM_PART_IS_DEFINED(SAM4SA16C) )




#define SAM4SD16 ( SAM_PART_IS_DEFINED(SAM4SD16B) || SAM_PART_IS_DEFINED(SAM4SD16C) )




#define SAM4SD32 ( SAM_PART_IS_DEFINED(SAM4SD32B) || SAM_PART_IS_DEFINED(SAM4SD32C) )
# 789 "../src/ASF/common/utils/parts.h"
#define SAM4LS ( SAM_PART_IS_DEFINED(SAM4LS2A) || SAM_PART_IS_DEFINED(SAM4LS2B) || SAM_PART_IS_DEFINED(SAM4LS2C) || SAM_PART_IS_DEFINED(SAM4LS4A) || SAM_PART_IS_DEFINED(SAM4LS4B) || SAM_PART_IS_DEFINED(SAM4LS4C) || SAM_PART_IS_DEFINED(SAM4LS8A) || SAM_PART_IS_DEFINED(SAM4LS8B) || SAM_PART_IS_DEFINED(SAM4LS8C) )
# 801 "../src/ASF/common/utils/parts.h"
#define SAM4LC ( SAM_PART_IS_DEFINED(SAM4LC2A) || SAM_PART_IS_DEFINED(SAM4LC2B) || SAM_PART_IS_DEFINED(SAM4LC2C) || SAM_PART_IS_DEFINED(SAM4LC4A) || SAM_PART_IS_DEFINED(SAM4LC4B) || SAM_PART_IS_DEFINED(SAM4LC4C) || SAM_PART_IS_DEFINED(SAM4LC8A) || SAM_PART_IS_DEFINED(SAM4LC8B) || SAM_PART_IS_DEFINED(SAM4LC8C) )
# 818 "../src/ASF/common/utils/parts.h"
#define SAMD20J ( SAM_PART_IS_DEFINED(SAMD20J14) || SAM_PART_IS_DEFINED(SAMD20J15) || SAM_PART_IS_DEFINED(SAMD20J16) || SAM_PART_IS_DEFINED(SAMD20J14B) || SAM_PART_IS_DEFINED(SAMD20J15B) || SAM_PART_IS_DEFINED(SAMD20J16B) || SAM_PART_IS_DEFINED(SAMD20J17) || SAM_PART_IS_DEFINED(SAMD20J18) )
# 829 "../src/ASF/common/utils/parts.h"
#define SAMD20G ( SAM_PART_IS_DEFINED(SAMD20G14) || SAM_PART_IS_DEFINED(SAMD20G15) || SAM_PART_IS_DEFINED(SAMD20G16) || SAM_PART_IS_DEFINED(SAMD20G14B) || SAM_PART_IS_DEFINED(SAMD20G15B) || SAM_PART_IS_DEFINED(SAMD20G16B) || SAM_PART_IS_DEFINED(SAMD20G17) || SAM_PART_IS_DEFINED(SAMD20G17U) || SAM_PART_IS_DEFINED(SAMD20G18) || SAM_PART_IS_DEFINED(SAMD20G18U) )
# 842 "../src/ASF/common/utils/parts.h"
#define SAMD20E ( SAM_PART_IS_DEFINED(SAMD20E14) || SAM_PART_IS_DEFINED(SAMD20E15) || SAM_PART_IS_DEFINED(SAMD20E16) || SAM_PART_IS_DEFINED(SAMD20E14B) || SAM_PART_IS_DEFINED(SAMD20E15B) || SAM_PART_IS_DEFINED(SAMD20E16B) || SAM_PART_IS_DEFINED(SAMD20E17) || SAM_PART_IS_DEFINED(SAMD20E18) )
# 859 "../src/ASF/common/utils/parts.h"
#define SAMD21J ( SAM_PART_IS_DEFINED(SAMD21J15A) || SAM_PART_IS_DEFINED(SAMD21J16A) || SAM_PART_IS_DEFINED(SAMD21J17A) || SAM_PART_IS_DEFINED(SAMD21J18A) || SAM_PART_IS_DEFINED(SAMD21J15B) || SAM_PART_IS_DEFINED(SAMD21J16B) || SAM_PART_IS_DEFINED(SAMD21J17D) )
# 869 "../src/ASF/common/utils/parts.h"
#define SAMD21G ( SAM_PART_IS_DEFINED(SAMD21G15A) || SAM_PART_IS_DEFINED(SAMD21G16A) || SAM_PART_IS_DEFINED(SAMD21G17A) || SAM_PART_IS_DEFINED(SAMD21G17AU) || SAM_PART_IS_DEFINED(SAMD21G18A) || SAM_PART_IS_DEFINED(SAMD21G18AU) || SAM_PART_IS_DEFINED(SAMD21G15B) || SAM_PART_IS_DEFINED(SAMD21G16B) || SAM_PART_IS_DEFINED(SAMD21G15L) || SAM_PART_IS_DEFINED(SAMD21G16L) || SAM_PART_IS_DEFINED(SAMD21G17D) || SAM_PART_IS_DEFINED(SAMD21G17L) )
# 884 "../src/ASF/common/utils/parts.h"
#define SAMD21GXXL ( SAM_PART_IS_DEFINED(SAMD21G15L) || SAM_PART_IS_DEFINED(SAMD21G16L) || SAM_PART_IS_DEFINED(SAMD21G17L) )





#define SAMD21E ( SAM_PART_IS_DEFINED(SAMD21E15A) || SAM_PART_IS_DEFINED(SAMD21E16A) || SAM_PART_IS_DEFINED(SAMD21E17A) || SAM_PART_IS_DEFINED(SAMD21E18A) || SAM_PART_IS_DEFINED(SAMD21E15B) || SAM_PART_IS_DEFINED(SAMD21E15BU) || SAM_PART_IS_DEFINED(SAMD21E16B) || SAM_PART_IS_DEFINED(SAMD21E16BU) || SAM_PART_IS_DEFINED(SAMD21E15L) || SAM_PART_IS_DEFINED(SAMD21E16L) || SAM_PART_IS_DEFINED(SAMD21E17D) || SAM_PART_IS_DEFINED(SAMD21E17DU) || SAM_PART_IS_DEFINED(SAMD21E17L) )
# 906 "../src/ASF/common/utils/parts.h"
#define SAMD21EXXL ( SAM_PART_IS_DEFINED(SAMD21E15L) || SAM_PART_IS_DEFINED(SAMD21E16L) || SAM_PART_IS_DEFINED(SAMD21E17L) )
# 918 "../src/ASF/common/utils/parts.h"
#define SAMR21G ( SAM_PART_IS_DEFINED(SAMR21G16A) || SAM_PART_IS_DEFINED(SAMR21G17A) || SAM_PART_IS_DEFINED(SAMR21G18A) )





#define SAMR21E ( SAM_PART_IS_DEFINED(SAMR21E16A) || SAM_PART_IS_DEFINED(SAMR21E17A) || SAM_PART_IS_DEFINED(SAMR21E18A) || SAM_PART_IS_DEFINED(SAMR21E19A) )
# 936 "../src/ASF/common/utils/parts.h"
#define SAMR30G ( SAM_PART_IS_DEFINED(SAMR30G18A) )



#define SAMR30E ( SAM_PART_IS_DEFINED(SAMR30E18A) )
# 949 "../src/ASF/common/utils/parts.h"
#define SAMR34J ( SAM_PART_IS_DEFINED(SAMR34J18A) || SAM_PART_IS_DEFINED(SAMR34J17A) || SAM_PART_IS_DEFINED(SAMR34J16A) || SAM_PART_IS_DEFINED(SAMR34J18B) || SAM_PART_IS_DEFINED(SAMR34J17B) || SAM_PART_IS_DEFINED(SAMR34J16B) )
# 959 "../src/ASF/common/utils/parts.h"
#define SAMR34JXXA ( SAM_PART_IS_DEFINED(SAMR34J18A) || SAM_PART_IS_DEFINED(SAMR34J17A) || SAM_PART_IS_DEFINED(SAMR34J16A) )





#define SAMR34JXXB ( SAM_PART_IS_DEFINED(SAMR34J18B) || SAM_PART_IS_DEFINED(SAMR34J17B) || SAM_PART_IS_DEFINED(SAMR34J16B) )






#define SAMR35J ( SAM_PART_IS_DEFINED(SAMR35J18B) || SAM_PART_IS_DEFINED(SAMR35J17B) || SAM_PART_IS_DEFINED(SAMR35J16B) )






#define SAMR35JXXB ( SAM_PART_IS_DEFINED(SAMR35J18B) || SAM_PART_IS_DEFINED(SAMR35J17B) || SAM_PART_IS_DEFINED(SAMR35J16B) )






#define WLR089U ( SAM_PART_IS_DEFINED(WLR089U0) )




#define WLR089U0 ( SAM_PART_IS_DEFINED(WLR089U0) )







#define SAMB11G ( SAM_PART_IS_DEFINED(SAMB11G18A) || SAM_PART_IS_DEFINED(SAMB11ZR) )



#define BTLC1000 ( SAM_PART_IS_DEFINED(BTLC1000WLCSP) )
# 1013 "../src/ASF/common/utils/parts.h"
#define SAMD09C ( SAM_PART_IS_DEFINED(SAMD09C13A) )



#define SAMD09D ( SAM_PART_IS_DEFINED(SAMD09D14A) )
# 1026 "../src/ASF/common/utils/parts.h"
#define SAMD10C ( SAM_PART_IS_DEFINED(SAMD10C12A) || SAM_PART_IS_DEFINED(SAMD10C13A) || SAM_PART_IS_DEFINED(SAMD10C14A) )





#define SAMD10DS ( SAM_PART_IS_DEFINED(SAMD10D12AS) || SAM_PART_IS_DEFINED(SAMD10D13AS) || SAM_PART_IS_DEFINED(SAMD10D14AS) )





#define SAMD10DM ( SAM_PART_IS_DEFINED(SAMD10D12AM) || SAM_PART_IS_DEFINED(SAMD10D13AM) || SAM_PART_IS_DEFINED(SAMD10D14AM) )





#define SAMD10DU ( SAM_PART_IS_DEFINED(SAMD10D14AU) )
# 1053 "../src/ASF/common/utils/parts.h"
#define SAMD11C ( SAM_PART_IS_DEFINED(SAMD11C14A) )



#define SAMD11DS ( SAM_PART_IS_DEFINED(SAMD11D14AS) )



#define SAMD11DM ( SAM_PART_IS_DEFINED(SAMD11D14AM) )



#define SAMD11DU ( SAM_PART_IS_DEFINED(SAMD11D14AU) )
# 1074 "../src/ASF/common/utils/parts.h"
#define SAML21E ( SAM_PART_IS_DEFINED(SAML21E18A) || SAM_PART_IS_DEFINED(SAML21E15B) || SAM_PART_IS_DEFINED(SAML21E16B) || SAM_PART_IS_DEFINED(SAML21E17B) || SAM_PART_IS_DEFINED(SAML21E18B) )







#define SAML21G ( SAM_PART_IS_DEFINED(SAML21G18A) || SAM_PART_IS_DEFINED(SAML21G16B) || SAM_PART_IS_DEFINED(SAML21G17B) || SAM_PART_IS_DEFINED(SAML21G18B) )






#define SAML21J ( SAM_PART_IS_DEFINED(SAML21J18A) || SAM_PART_IS_DEFINED(SAML21J16B) || SAM_PART_IS_DEFINED(SAML21J17B) || SAM_PART_IS_DEFINED(SAML21J18B) )







#define SAML21XXXA ( SAM_PART_IS_DEFINED(SAML21E18A) || SAM_PART_IS_DEFINED(SAML21G18A) || SAM_PART_IS_DEFINED(SAML21J18A) )






#define SAML21XXXB ( SAM_PART_IS_DEFINED(SAML21E15B) || SAM_PART_IS_DEFINED(SAML21E16B) || SAM_PART_IS_DEFINED(SAML21E17B) || SAM_PART_IS_DEFINED(SAML21E18B) || SAM_PART_IS_DEFINED(SAML21G16B) || SAM_PART_IS_DEFINED(SAML21G17B) || SAM_PART_IS_DEFINED(SAML21G18B) || SAM_PART_IS_DEFINED(SAML21J16B) || SAM_PART_IS_DEFINED(SAML21J17B) || SAM_PART_IS_DEFINED(SAML21J18B) )
# 1123 "../src/ASF/common/utils/parts.h"
#define SAML22N ( SAM_PART_IS_DEFINED(SAML22N16A) || SAM_PART_IS_DEFINED(SAML22N17A) || SAM_PART_IS_DEFINED(SAML22N18A) )





#define SAML22G ( SAM_PART_IS_DEFINED(SAML22G16A) || SAM_PART_IS_DEFINED(SAML22G17A) || SAM_PART_IS_DEFINED(SAML22G18A) )





#define SAML22J ( SAM_PART_IS_DEFINED(SAML22J16A) || SAM_PART_IS_DEFINED(SAML22J17A) || SAM_PART_IS_DEFINED(SAML22J18A) )
# 1146 "../src/ASF/common/utils/parts.h"
#define SAMDA1J ( SAM_PART_IS_DEFINED(SAMDA1J14A) || SAM_PART_IS_DEFINED(SAMDA1J15B) || SAM_PART_IS_DEFINED(SAMDA1J15A) || SAM_PART_IS_DEFINED(SAMDA1J15B) || SAM_PART_IS_DEFINED(SAMDA1J16A) || SAM_PART_IS_DEFINED(SAMDA1J16B) )
# 1155 "../src/ASF/common/utils/parts.h"
#define SAMDA1G ( SAM_PART_IS_DEFINED(SAMDA1G14A) || SAM_PART_IS_DEFINED(SAMDA1G14B) || SAM_PART_IS_DEFINED(SAMDA1G15A) || SAM_PART_IS_DEFINED(SAMDA1G15B) || SAM_PART_IS_DEFINED(SAMDA1G16A) || SAM_PART_IS_DEFINED(SAMDA1G16B) )
# 1164 "../src/ASF/common/utils/parts.h"
#define SAMDA1E ( SAM_PART_IS_DEFINED(SAMDA1E14A) || SAM_PART_IS_DEFINED(SAMDA1E14B) || SAM_PART_IS_DEFINED(SAMDA1E15A) || SAM_PART_IS_DEFINED(SAMDA1E15B) || SAM_PART_IS_DEFINED(SAMDA1E16A) || SAM_PART_IS_DEFINED(SAMDA1E16B) )
# 1178 "../src/ASF/common/utils/parts.h"
#define SAMHA1G ( SAM_PART_IS_DEFINED(SAMHA1G14A) || SAM_PART_IS_DEFINED(SAMHA1G15A) || SAM_PART_IS_DEFINED(SAMHA1G16A) || SAM_PART_IS_DEFINED(SAMHA1G14AB) || SAM_PART_IS_DEFINED(SAMHA1G15AB) || SAM_PART_IS_DEFINED(SAMHA1G16AB) )
# 1187 "../src/ASF/common/utils/parts.h"
#define SAMHA1E ( SAM_PART_IS_DEFINED(SAMHA1E14A) || SAM_PART_IS_DEFINED(SAMHA1E15A) || SAM_PART_IS_DEFINED(SAMHA1E16A) || SAM_PART_IS_DEFINED(SAMHA1E14AB) || SAM_PART_IS_DEFINED(SAMHA1E15AB) || SAM_PART_IS_DEFINED(SAMHA1E16AB) )
# 1202 "../src/ASF/common/utils/parts.h"
#define SAMHA0G ( SAM_PART_IS_DEFINED(SAMHA0G14AB) || SAM_PART_IS_DEFINED(SAMHA0G15AB) || SAM_PART_IS_DEFINED(SAMHA0G16AB) )





#define SAMHA0E ( SAM_PART_IS_DEFINED(SAMHA0E14AB) || SAM_PART_IS_DEFINED(SAMHA0E15AB) || SAM_PART_IS_DEFINED(SAMHA0E16AB) )
# 1220 "../src/ASF/common/utils/parts.h"
#define SAMC20E ( SAM_PART_IS_DEFINED(SAMC20E15A) || SAM_PART_IS_DEFINED(SAMC20E16A) || SAM_PART_IS_DEFINED(SAMC20E17A) || SAM_PART_IS_DEFINED(SAMC20E18A) )






#define SAMC20G ( SAM_PART_IS_DEFINED(SAMC20G15A) || SAM_PART_IS_DEFINED(SAMC20G16A) || SAM_PART_IS_DEFINED(SAMC20G17A) || SAM_PART_IS_DEFINED(SAMC20G18A) )






#define SAMC20J ( SAM_PART_IS_DEFINED(SAMC20J15A) || SAM_PART_IS_DEFINED(SAMC20J16A) || SAM_PART_IS_DEFINED(SAMC20J17A) || SAM_PART_IS_DEFINED(SAMC20J18A) )
# 1246 "../src/ASF/common/utils/parts.h"
#define SAMC21E ( SAM_PART_IS_DEFINED(SAMC21E15A) || SAM_PART_IS_DEFINED(SAMC21E16A) || SAM_PART_IS_DEFINED(SAMC21E17A) || SAM_PART_IS_DEFINED(SAMC21E18A) )






#define SAMC21G ( SAM_PART_IS_DEFINED(SAMC21G15A) || SAM_PART_IS_DEFINED(SAMC21G16A) || SAM_PART_IS_DEFINED(SAMC21G17A) || SAM_PART_IS_DEFINED(SAMC21G18A) )






#define SAMC21J ( SAM_PART_IS_DEFINED(SAMC21J15A) || SAM_PART_IS_DEFINED(SAMC21J16A) || SAM_PART_IS_DEFINED(SAMC21J17A) || SAM_PART_IS_DEFINED(SAMC21J18A) )
# 1272 "../src/ASF/common/utils/parts.h"
#define SAM4E8 ( SAM_PART_IS_DEFINED(SAM4E8C) || SAM_PART_IS_DEFINED(SAM4E8CB) || SAM_PART_IS_DEFINED(SAM4E8E) )





#define SAM4E16 ( SAM_PART_IS_DEFINED(SAM4E16C) || SAM_PART_IS_DEFINED(SAM4E16CB) || SAM_PART_IS_DEFINED(SAM4E16E) )
# 1289 "../src/ASF/common/utils/parts.h"
#define SAM4N8 ( SAM_PART_IS_DEFINED(SAM4N8A) || SAM_PART_IS_DEFINED(SAM4N8B) || SAM_PART_IS_DEFINED(SAM4N8C) )





#define SAM4N16 ( SAM_PART_IS_DEFINED(SAM4N16B) || SAM_PART_IS_DEFINED(SAM4N16C) )
# 1305 "../src/ASF/common/utils/parts.h"
#define SAM4C4_0 ( SAM_PART_IS_DEFINED(SAM4C4C_0) )



#define SAM4C4_1 ( SAM_PART_IS_DEFINED(SAM4C4C_1) )



#define SAM4C4 (SAM4C4_0 || SAM4C4_1)

#define SAM4C8_0 ( SAM_PART_IS_DEFINED(SAM4C8C_0) )



#define SAM4C8_1 ( SAM_PART_IS_DEFINED(SAM4C8C_1) )



#define SAM4C8 (SAM4C8_0 || SAM4C8_1)

#define SAM4C16_0 ( SAM_PART_IS_DEFINED(SAM4C16C_0) )



#define SAM4C16_1 ( SAM_PART_IS_DEFINED(SAM4C16C_1) )



#define SAM4C16 (SAM4C16_0 || SAM4C16_1)

#define SAM4C32_0 ( SAM_PART_IS_DEFINED(SAM4C32C_0) || SAM_PART_IS_DEFINED(SAM4C32E_0) )




#define SAM4C32_1 ( SAM_PART_IS_DEFINED(SAM4C32C_1) || SAM_PART_IS_DEFINED(SAM4C32E_1) )





#define SAM4C32 (SAM4C32_0 || SAM4C32_1)







#define SAM4CMP8_0 ( SAM_PART_IS_DEFINED(SAM4CMP8C_0) )



#define SAM4CMP8_1 ( SAM_PART_IS_DEFINED(SAM4CMP8C_1) )



#define SAM4CMP8 (SAM4CMP8_0 || SAM4CMP8_1)

#define SAM4CMP16_0 ( SAM_PART_IS_DEFINED(SAM4CMP16C_0) )



#define SAM4CMP16_1 ( SAM_PART_IS_DEFINED(SAM4CMP16C_1) )



#define SAM4CMP16 (SAM4CMP16_0 || SAM4CMP16_1)

#define SAM4CMP32_0 ( SAM_PART_IS_DEFINED(SAM4CMP32C_0) )



#define SAM4CMP32_1 ( SAM_PART_IS_DEFINED(SAM4CMP32C_1) )



#define SAM4CMP32 (SAM4CMP32_0 || SAM4CMP32_1)

#define SAM4CMS4_0 ( SAM_PART_IS_DEFINED(SAM4CMS4C_0) )



#define SAM4CMS4_1 ( SAM_PART_IS_DEFINED(SAM4CMS4C_1) )



#define SAM4CMS4 (SAM4CMS4_0 || SAM4CMS4_1)

#define SAM4CMS8_0 ( SAM_PART_IS_DEFINED(SAM4CMS8C_0) )



#define SAM4CMS8_1 ( SAM_PART_IS_DEFINED(SAM4CMS8C_1) )



#define SAM4CMS8 (SAM4CMS8_0 || SAM4CMS8_1)

#define SAM4CMS16_0 ( SAM_PART_IS_DEFINED(SAM4CMS16C_0) )



#define SAM4CMS16_1 ( SAM_PART_IS_DEFINED(SAM4CMS16C_1) )



#define SAM4CMS16 (SAM4CMS16_0 || SAM4CMS16_1)

#define SAM4CMS32_0 ( SAM_PART_IS_DEFINED(SAM4CMS32C_0) )



#define SAM4CMS32_1 ( SAM_PART_IS_DEFINED(SAM4CMS32C_1) )



#define SAM4CMS32 (SAM4CMS32_0 || SAM4CMS32_1)







#define SAM4CP16_0 ( SAM_PART_IS_DEFINED(SAM4CP16B_0) )



#define SAM4CP16_1 ( SAM_PART_IS_DEFINED(SAM4CP16B_1) )



#define SAM4CP16 (SAM4CP16_0 || SAM4CP16_1)






#define SAMG51 ( SAM_PART_IS_DEFINED(SAMG51G18) )



#define SAMG53 ( SAM_PART_IS_DEFINED(SAMG53G19) || SAM_PART_IS_DEFINED(SAMG53N19) )




#define SAMG54 ( SAM_PART_IS_DEFINED(SAMG54G19) || SAM_PART_IS_DEFINED(SAMG54J19) || SAM_PART_IS_DEFINED(SAMG54N19) )





#define SAMG55 ( SAM_PART_IS_DEFINED(SAMG55G18) || SAM_PART_IS_DEFINED(SAMG55G19) || SAM_PART_IS_DEFINED(SAMG55J18) || SAM_PART_IS_DEFINED(SAMG55J19) || SAM_PART_IS_DEFINED(SAMG55N19) )
# 1473 "../src/ASF/common/utils/parts.h"
#define SAMV71J ( SAM_PART_IS_DEFINED(SAMV71J19) || SAM_PART_IS_DEFINED(SAMV71J20) || SAM_PART_IS_DEFINED(SAMV71J21) )





#define SAMV71JB ( SAM_PART_IS_DEFINED(SAMV71J19B) || SAM_PART_IS_DEFINED(SAMV71J20B) || SAM_PART_IS_DEFINED(SAMV71J21B) )





#define SAMV71N ( SAM_PART_IS_DEFINED(SAMV71N19) || SAM_PART_IS_DEFINED(SAMV71N20) || SAM_PART_IS_DEFINED(SAMV71N21) )





#define SAMV71NB ( SAM_PART_IS_DEFINED(SAMV71N19B) || SAM_PART_IS_DEFINED(SAMV71N20B) || SAM_PART_IS_DEFINED(SAMV71N21B) )





#define SAMV71Q ( SAM_PART_IS_DEFINED(SAMV71Q19) || SAM_PART_IS_DEFINED(SAMV71Q20) || SAM_PART_IS_DEFINED(SAMV71Q21) )





#define SAMV71QB ( SAM_PART_IS_DEFINED(SAMV71Q19B) || SAM_PART_IS_DEFINED(SAMV71Q20B) || SAM_PART_IS_DEFINED(SAMV71Q21B) )
# 1515 "../src/ASF/common/utils/parts.h"
#define SAMV70J ( SAM_PART_IS_DEFINED(SAMV70J19) || SAM_PART_IS_DEFINED(SAMV70J20) )




#define SAMV70JB ( SAM_PART_IS_DEFINED(SAMV70J19B) || SAM_PART_IS_DEFINED(SAMV70J20B) )




#define SAMV70N ( SAM_PART_IS_DEFINED(SAMV70N19) || SAM_PART_IS_DEFINED(SAMV70N20) )




#define SAMV70NB ( SAM_PART_IS_DEFINED(SAMV70N19B) || SAM_PART_IS_DEFINED(SAMV70N20B) )




#define SAMV70Q ( SAM_PART_IS_DEFINED(SAMV70Q19) || SAM_PART_IS_DEFINED(SAMV70Q20) )



#define SAMV70QB ( SAM_PART_IS_DEFINED(SAMV70Q19B) || SAM_PART_IS_DEFINED(SAMV70Q20B) )
# 1549 "../src/ASF/common/utils/parts.h"
#define SAMS70J ( SAM_PART_IS_DEFINED(SAMS70J19) || SAM_PART_IS_DEFINED(SAMS70J20) || SAM_PART_IS_DEFINED(SAMS70J21) )





#define SAMS70JB ( SAM_PART_IS_DEFINED(SAMS70J19B) || SAM_PART_IS_DEFINED(SAMS70J20B) || SAM_PART_IS_DEFINED(SAMS70J21B) )





#define SAMS70N ( SAM_PART_IS_DEFINED(SAMS70N19) || SAM_PART_IS_DEFINED(SAMS70N20) || SAM_PART_IS_DEFINED(SAMS70N21) )





#define SAMS70NB ( SAM_PART_IS_DEFINED(SAMS70N19B) || SAM_PART_IS_DEFINED(SAMS70N20B) || SAM_PART_IS_DEFINED(SAMS70N21B) )





#define SAMS70Q ( SAM_PART_IS_DEFINED(SAMS70Q19) || SAM_PART_IS_DEFINED(SAMS70Q20) || SAM_PART_IS_DEFINED(SAMS70Q21) )





#define SAMS70QB ( SAM_PART_IS_DEFINED(SAMS70Q19B) || SAM_PART_IS_DEFINED(SAMS70Q20B) || SAM_PART_IS_DEFINED(SAMS70Q21B) )
# 1590 "../src/ASF/common/utils/parts.h"
#define SAME70J ( SAM_PART_IS_DEFINED(SAME70J19) || SAM_PART_IS_DEFINED(SAME70J20) || SAM_PART_IS_DEFINED(SAME70J21) )





#define SAME70JB ( SAM_PART_IS_DEFINED(SAME70J19B) || SAM_PART_IS_DEFINED(SAME70J20B) || SAM_PART_IS_DEFINED(SAME70J21B) )





#define SAME70N ( SAM_PART_IS_DEFINED(SAME70N19) || SAM_PART_IS_DEFINED(SAME70N20) || SAM_PART_IS_DEFINED(SAME70N21) )





#define SAME70NB ( SAM_PART_IS_DEFINED(SAME70N19B) || SAM_PART_IS_DEFINED(SAME70N20B) || SAM_PART_IS_DEFINED(SAME70N21B) )





#define SAME70Q ( SAM_PART_IS_DEFINED(SAME70Q19) || SAM_PART_IS_DEFINED(SAME70Q20) || SAM_PART_IS_DEFINED(SAME70Q21) )





#define SAME70QB ( SAM_PART_IS_DEFINED(SAME70Q19B) || SAM_PART_IS_DEFINED(SAME70Q20B) || SAM_PART_IS_DEFINED(SAME70Q21B) )
# 1632 "../src/ASF/common/utils/parts.h"
#define SAM3S (SAM3S1 || SAM3S2 || SAM3S4 || SAM3S8 || SAM3SD8)


#define SAM3U (SAM3U1 || SAM3U2 || SAM3U4)


#define SAM3N (SAM3N00 || SAM3N0 || SAM3N1 || SAM3N2 || SAM3N4)


#define SAM3XA (SAM3X4 || SAM3X8 || SAM3A4 || SAM3A8)


#define SAM4S (SAM4S2 || SAM4S4 || SAM4S8 || SAM4S16 || SAM4SA16 || SAM4SD16 || SAM4SD32)


#define SAM4L (SAM4LS || SAM4LC)


#define SAMD20 (SAMD20J || SAMD20G || SAMD20E)


#define SAMD21 (SAMD21J || SAMD21G || SAMD21E)


#define SAMD09 (SAMD09C || SAMD09D)


#define SAMD10 (SAMD10C || SAMD10DS || SAMD10DM || SAMD10DU)


#define SAMD11 (SAMD11C || SAMD11DS || SAMD11DM || SAMD11DU)


#define SAMDA1 (SAMDA1J || SAMDA1G || SAMDA1E)


#define SAMHA1 (SAMHA1G || SAMHA1E)


#define SAMHA0 (SAMHA0G || SAMHA0E)


#define SAMD (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAMDA1)


#define SAMR21 (SAMR21G || SAMR21E)


#define SAMR30 (SAMR30G || SAMR30E)


#define SAMR34 (SAMR34J)


#define SAMR35 (SAMR35J)


#define WLR089 (WLR089U)


#define SAMB11 (SAMB11G || BTLC1000)


#define SAML21 (SAML21J || SAML21G || SAML21E)


#define SAML22 (SAML22J || SAML22G || SAML22N)

#define SAMC20 (SAMC20J || SAMC20G || SAMC20E)


#define SAMC21 (SAMC21J || SAMC21G || SAMC21E)


#define SAM4E (SAM4E8 || SAM4E16)


#define SAM4N (SAM4N8 || SAM4N16)


#define SAM4C_0 (SAM4C4_0 || SAM4C8_0 || SAM4C16_0 || SAM4C32_0)
#define SAM4C_1 (SAM4C4_1 || SAM4C8_1 || SAM4C16_1 || SAM4C32_1)
#define SAM4C (SAM4C4 || SAM4C8 || SAM4C16 || SAM4C32)


#define SAM4CM_0 (SAM4CMP8_0 || SAM4CMP16_0 || SAM4CMP32_0 || SAM4CMS4_0 || SAM4CMS8_0 || SAM4CMS16_0 || SAM4CMS32_0)

#define SAM4CM_1 (SAM4CMP8_1 || SAM4CMP16_1 || SAM4CMP32_1 || SAM4CMS4_1 || SAM4CMS8_1 || SAM4CMS16_1 || SAM4CMS32_1)

#define SAM4CM (SAM4CMP8 || SAM4CMP16 || SAM4CMP32 || SAM4CMS4 || SAM4CMS8 || SAM4CMS16 || SAM4CMS32)



#define SAM4CP_0 (SAM4CP16_0)
#define SAM4CP_1 (SAM4CP16_1)
#define SAM4CP (SAM4CP16)


#define SAMG (SAMG51 || SAMG53 || SAMG54 || SAMG55)


#define SAMB (SAMB11)


#define SAMV71 (SAMV71J || SAMV71N || SAMV71Q || SAMV71JB || SAMV71NB || SAMV71QB)
#define SAMV71B (SAMV71JB || SAMV71NB || SAMV71QB)


#define SAMV70 (SAMV70J || SAMV70N || SAMV70Q || SAMV70JB || SAMV70NB || SAMV70QB)
#define SAMV70B (SAMV70JB || SAMV70NB || SAMV70QB)


#define SAME70 (SAME70J || SAME70N || SAME70Q || SAME70JB || SAME70NB || SAME70QB)
#define SAME70B (SAME70JB || SAME70NB || SAME70QB)


#define SAMS70 (SAMS70J || SAMS70N || SAMS70Q || SAMS70JB || SAMS70NB || SAMS70QB)
#define SAMS70B (SAMS70JB || SAMS70NB || SAMS70QB)


#define SAM0 (SAMD20 || SAMD21 || SAMR21 || SAMD10 || SAMD11 || SAML21 || SAMDA1 || SAMC20 || SAMC21 || SAML22 || SAMD09 || SAMR30 || SAMHA1 || SAMHA0 || SAMR34 || SAMR35 || WLR089)






#define SAM (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S || SAM4L || SAM4E || SAM0 || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAME70 || SAMS70)
# 40 "../src/ASF/common/services/gpio/gpio.h" 2






# 1 "../src/ASF/common/services/gpio/mega_gpio/mega_gpio.h" 1
# 38 "../src/ASF/common/services/gpio/mega_gpio/mega_gpio.h"
#define _MEGA_GPIO_H_ 

# 1 "../src/ASF/mega/utils/compiler.h" 1
# 37 "../src/ASF/mega/utils/compiler.h"
#define UTILS_COMPILER_H 


# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 1 3
# 97 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
#define _AVR_IO_H_ 

# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 1 3
# 36 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define _AVR_SFR_DEFS_H_ 1
# 121 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define _SFR_ASM_COMPAT 0




# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 1 3
# 35 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
#define __INTTYPES_H_ 

# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 1 3 4
# 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 3 4
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 1 3 4
# 41 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define __STDINT_H_ 
# 59 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define __USING_MINT8 0
# 125 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4

# 125 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;







#define __CONCATenate(left,right) left ## right
#define __CONCAT(left,right) __CONCATenate(left, right)
# 307 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define INT8_MAX 0x7f




#define INT8_MIN (-INT8_MAX - 1)
# 331 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define UINT8_MAX (INT8_MAX * 2 + 1)




#define INT16_MAX 0x7fff




#define INT16_MIN (-INT16_MAX - 1)




#define UINT16_MAX (__CONCAT(INT16_MAX, U) * 2U + 1U)




#define INT32_MAX 0x7fffffffL




#define INT32_MIN (-INT32_MAX - 1L)




#define UINT32_MAX (__CONCAT(INT32_MAX, U) * 2UL + 1UL)






#define INT64_MAX 0x7fffffffffffffffLL




#define INT64_MIN (-INT64_MAX - 1LL)




#define UINT64_MAX (__CONCAT(INT64_MAX, U) * 2ULL + 1ULL)
# 388 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define INT_LEAST8_MAX INT8_MAX




#define INT_LEAST8_MIN INT8_MIN




#define UINT_LEAST8_MAX UINT8_MAX




#define INT_LEAST16_MAX INT16_MAX




#define INT_LEAST16_MIN INT16_MIN




#define UINT_LEAST16_MAX UINT16_MAX




#define INT_LEAST32_MAX INT32_MAX




#define INT_LEAST32_MIN INT32_MIN




#define UINT_LEAST32_MAX UINT32_MAX




#define INT_LEAST64_MAX INT64_MAX




#define INT_LEAST64_MIN INT64_MIN




#define UINT_LEAST64_MAX UINT64_MAX
# 454 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define INT_FAST8_MAX INT8_MAX




#define INT_FAST8_MIN INT8_MIN




#define UINT_FAST8_MAX UINT8_MAX




#define INT_FAST16_MAX INT16_MAX




#define INT_FAST16_MIN INT16_MIN




#define UINT_FAST16_MAX UINT16_MAX




#define INT_FAST32_MAX INT32_MAX




#define INT_FAST32_MIN INT32_MIN




#define UINT_FAST32_MAX UINT32_MAX




#define INT_FAST64_MAX INT64_MAX




#define INT_FAST64_MIN INT64_MIN




#define UINT_FAST64_MAX UINT64_MAX
# 520 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define INTPTR_MAX INT16_MAX




#define INTPTR_MIN INT16_MIN




#define UINTPTR_MAX UINT16_MAX
# 541 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define INTMAX_MAX INT64_MAX




#define INTMAX_MIN INT64_MIN




#define UINTMAX_MAX UINT64_MAX
# 564 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define PTRDIFF_MAX INT16_MAX




#define PTRDIFF_MIN INT16_MIN
# 578 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define SIG_ATOMIC_MAX INT8_MAX




#define SIG_ATOMIC_MIN INT8_MIN





#define SIZE_MAX UINT16_MAX
# 601 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define WCHAR_MAX __WCHAR_MAX__
#define WCHAR_MIN __WCHAR_MIN__


#define WINT_MAX __WINT_MAX__
#define WINT_MIN __WINT_MIN__
# 625 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
#define INT8_C(c) __INT8_C(c)
#define INT16_C(c) __INT16_C(c)
#define INT32_C(c) __INT32_C(c)
#define INT64_C(c) __INT64_C(c)
#define UINT8_C(c) __UINT8_C(c)
#define UINT16_C(c) __UINT16_C(c)
#define UINT32_C(c) __UINT32_C(c)
#define UINT64_C(c) __UINT64_C(c)
#define INTMAX_C(c) __INTMAX_C(c)
#define UINTMAX_C(c) __UINTMAX_C(c)
# 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 38 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 2 3
# 77 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 96 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
#define PRId8 "d"


#define PRIdLEAST8 "d"


#define PRIdFAST8 "d"



#define PRIi8 "i"


#define PRIiLEAST8 "i"


#define PRIiFAST8 "i"




#define PRId16 "d"


#define PRIdLEAST16 "d"


#define PRIdFAST16 "d"



#define PRIi16 "i"


#define PRIiLEAST16 "i"


#define PRIiFAST16 "i"




#define PRId32 "ld"


#define PRIdLEAST32 "ld"


#define PRIdFAST32 "ld"



#define PRIi32 "li"


#define PRIiLEAST32 "li"


#define PRIiFAST32 "li"
# 175 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
#define PRIdPTR PRId16


#define PRIiPTR PRIi16



#define PRIo8 "o"


#define PRIoLEAST8 "o"


#define PRIoFAST8 "o"



#define PRIu8 "u"


#define PRIuLEAST8 "u"


#define PRIuFAST8 "u"



#define PRIx8 "x"


#define PRIxLEAST8 "x"


#define PRIxFAST8 "x"



#define PRIX8 "X"


#define PRIXLEAST8 "X"


#define PRIXFAST8 "X"




#define PRIo16 "o"


#define PRIoLEAST16 "o"


#define PRIoFAST16 "o"



#define PRIu16 "u"


#define PRIuLEAST16 "u"


#define PRIuFAST16 "u"



#define PRIx16 "x"


#define PRIxLEAST16 "x"


#define PRIxFAST16 "x"



#define PRIX16 "X"


#define PRIXLEAST16 "X"


#define PRIXFAST16 "X"




#define PRIo32 "lo"


#define PRIoLEAST32 "lo"


#define PRIoFAST32 "lo"



#define PRIu32 "lu"


#define PRIuLEAST32 "lu"


#define PRIuFAST32 "lu"



#define PRIx32 "lx"


#define PRIxLEAST32 "lx"


#define PRIxFAST32 "lx"



#define PRIX32 "lX"


#define PRIXLEAST32 "lX"


#define PRIXFAST32 "lX"
# 330 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
#define PRIoPTR PRIo16


#define PRIuPTR PRIu16


#define PRIxPTR PRIx16


#define PRIXPTR PRIX16




#define SCNd8 "hhd"


#define SCNdLEAST8 "hhd"


#define SCNdFAST8 "hhd"



#define SCNi8 "hhi"


#define SCNiLEAST8 "hhi"


#define SCNiFAST8 "hhi"




#define SCNd16 "d"


#define SCNdLEAST16 "d"


#define SCNdFAST16 "d"



#define SCNi16 "i"


#define SCNiLEAST16 "i"


#define SCNiFAST16 "i"




#define SCNd32 "ld"


#define SCNdLEAST32 "ld"


#define SCNdFAST32 "ld"



#define SCNi32 "li"


#define SCNiLEAST32 "li"


#define SCNiFAST32 "li"
# 422 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
#define SCNdPTR SCNd16


#define SCNiPTR SCNi16



#define SCNo8 "hho"


#define SCNoLEAST8 "hho"


#define SCNoFAST8 "hho"



#define SCNu8 "hhu"


#define SCNuLEAST8 "hhu"


#define SCNuFAST8 "hhu"



#define SCNx8 "hhx"


#define SCNxLEAST8 "hhx"


#define SCNxFAST8 "hhx"



#define SCNo16 "o"


#define SCNoLEAST16 "o"


#define SCNoFAST16 "o"



#define SCNu16 "u"


#define SCNuLEAST16 "u"


#define SCNuFAST16 "u"



#define SCNx16 "x"


#define SCNxLEAST16 "x"


#define SCNxFAST16 "x"




#define SCNo32 "lo"


#define SCNoLEAST32 "lo"


#define SCNoFAST32 "lo"



#define SCNu32 "lu"


#define SCNuLEAST32 "lu"


#define SCNuFAST32 "lu"



#define SCNx32 "lx"


#define SCNxLEAST32 "lx"


#define SCNxFAST32 "lx"
# 541 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
#define SCNoPTR SCNo16


#define SCNuPTR SCNu16


#define SCNxPTR SCNx16
# 127 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 2 3

#define _MMIO_BYTE(mem_addr) (*(volatile uint8_t *)(mem_addr))
#define _MMIO_WORD(mem_addr) (*(volatile uint16_t *)(mem_addr))
#define _MMIO_DWORD(mem_addr) (*(volatile uint32_t *)(mem_addr))
# 172 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define __SFR_OFFSET 0x20



#define _SFR_MEM8(mem_addr) _MMIO_BYTE(mem_addr)
#define _SFR_MEM16(mem_addr) _MMIO_WORD(mem_addr)
#define _SFR_MEM32(mem_addr) _MMIO_DWORD(mem_addr)
#define _SFR_IO8(io_addr) _MMIO_BYTE((io_addr) + __SFR_OFFSET)
#define _SFR_IO16(io_addr) _MMIO_WORD((io_addr) + __SFR_OFFSET)

#define _SFR_MEM_ADDR(sfr) ((uint16_t) &(sfr))
#define _SFR_IO_ADDR(sfr) (_SFR_MEM_ADDR(sfr) - __SFR_OFFSET)
#define _SFR_IO_REG_P(sfr) (_SFR_MEM_ADDR(sfr) < 0x40 + __SFR_OFFSET)

#define _SFR_ADDR(sfr) _SFR_MEM_ADDR(sfr)



#define _SFR_BYTE(sfr) _MMIO_BYTE(_SFR_ADDR(sfr))
#define _SFR_WORD(sfr) _MMIO_WORD(_SFR_ADDR(sfr))
#define _SFR_DWORD(sfr) _MMIO_DWORD(_SFR_ADDR(sfr))
# 208 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define _BV(bit) (1 << (bit))




#define _VECTOR(N) __vector_ ## N
# 234 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define bit_is_set(sfr,bit) (_SFR_BYTE(sfr) & _BV(bit))
# 245 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define bit_is_clear(sfr,bit) (!(_SFR_BYTE(sfr) & _BV(bit)))
# 254 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define loop_until_bit_is_set(sfr,bit) do { } while (bit_is_clear(sfr, bit))
# 263 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
#define loop_until_bit_is_clear(sfr,bit) do { } while (bit_is_set(sfr, bit))
# 100 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 272 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "C:\\Program Files (x86)\\Atmel\\Studio\\7.0\\Packs\\atmel\\ATmega_DFP\\1.7.374\\include/avr/iom328p.h" 1 3
# 44 "C:\\Program Files (x86)\\Atmel\\Studio\\7.0\\Packs\\atmel\\ATmega_DFP\\1.7.374\\include/avr/iom328p.h" 3
#define _AVR_IOXXX_H_ "iom328p.h"






#define _AVR_IOM328P_H_ 1



#define PINB _SFR_IO8(0x03)
#define PINB0 0
#define PINB1 1
#define PINB2 2
#define PINB3 3
#define PINB4 4
#define PINB5 5
#define PINB6 6
#define PINB7 7

#define DDRB _SFR_IO8(0x04)
#define DDB0 0
#define DDB1 1
#define DDB2 2
#define DDB3 3
#define DDB4 4
#define DDB5 5
#define DDB6 6
#define DDB7 7

#define PORTB _SFR_IO8(0x05)
#define PORTB0 0
#define PORTB1 1
#define PORTB2 2
#define PORTB3 3
#define PORTB4 4
#define PORTB5 5
#define PORTB6 6
#define PORTB7 7

#define PINC _SFR_IO8(0x06)
#define PINC0 0
#define PINC1 1
#define PINC2 2
#define PINC3 3
#define PINC4 4
#define PINC5 5
#define PINC6 6

#define DDRC _SFR_IO8(0x07)
#define DDC0 0
#define DDC1 1
#define DDC2 2
#define DDC3 3
#define DDC4 4
#define DDC5 5
#define DDC6 6

#define PORTC _SFR_IO8(0x08)
#define PORTC0 0
#define PORTC1 1
#define PORTC2 2
#define PORTC3 3
#define PORTC4 4
#define PORTC5 5
#define PORTC6 6

#define PIND _SFR_IO8(0x09)
#define PIND0 0
#define PIND1 1
#define PIND2 2
#define PIND3 3
#define PIND4 4
#define PIND5 5
#define PIND6 6
#define PIND7 7

#define DDRD _SFR_IO8(0x0A)
#define DDD0 0
#define DDD1 1
#define DDD2 2
#define DDD3 3
#define DDD4 4
#define DDD5 5
#define DDD6 6
#define DDD7 7

#define PORTD _SFR_IO8(0x0B)
#define PORTD0 0
#define PORTD1 1
#define PORTD2 2
#define PORTD3 3
#define PORTD4 4
#define PORTD5 5
#define PORTD6 6
#define PORTD7 7

#define TIFR0 _SFR_IO8(0x15)
#define TOV0 0
#define OCF0A 1
#define OCF0B 2

#define TIFR1 _SFR_IO8(0x16)
#define TOV1 0
#define OCF1A 1
#define OCF1B 2
#define ICF1 5

#define TIFR2 _SFR_IO8(0x17)
#define TOV2 0
#define OCF2A 1
#define OCF2B 2

#define PCIFR _SFR_IO8(0x1B)
#define PCIF0 0
#define PCIF1 1
#define PCIF2 2

#define EIFR _SFR_IO8(0x1C)
#define INTF0 0
#define INTF1 1

#define EIMSK _SFR_IO8(0x1D)
#define INT0 0
#define INT1 1

#define GPIOR0 _SFR_IO8(0x1E)
#define GPIOR00 0
#define GPIOR01 1
#define GPIOR02 2
#define GPIOR03 3
#define GPIOR04 4
#define GPIOR05 5
#define GPIOR06 6
#define GPIOR07 7

#define EECR _SFR_IO8(0x1F)
#define EERE 0
#define EEPE 1
#define EEMPE 2
#define EERIE 3
#define EEPM0 4
#define EEPM1 5

#define EEDR _SFR_IO8(0x20)
#define EEDR0 0
#define EEDR1 1
#define EEDR2 2
#define EEDR3 3
#define EEDR4 4
#define EEDR5 5
#define EEDR6 6
#define EEDR7 7

#define EEAR _SFR_IO16(0x21)

#define EEARL _SFR_IO8(0x21)
#define EEAR0 0
#define EEAR1 1
#define EEAR2 2
#define EEAR3 3
#define EEAR4 4
#define EEAR5 5
#define EEAR6 6
#define EEAR7 7

#define EEARH _SFR_IO8(0x22)
#define EEAR8 0
#define EEAR9 1

#define _EEPROM_REG_LOCATIONS_ 1F2021

#define GTCCR _SFR_IO8(0x23)
#define PSRSYNC 0
#define PSRASY 1
#define TSM 7

#define TCCR0A _SFR_IO8(0x24)
#define WGM00 0
#define WGM01 1
#define COM0B0 4
#define COM0B1 5
#define COM0A0 6
#define COM0A1 7

#define TCCR0B _SFR_IO8(0x25)
#define CS00 0
#define CS01 1
#define CS02 2
#define WGM02 3
#define FOC0B 6
#define FOC0A 7

#define TCNT0 _SFR_IO8(0x26)
#define TCNT0_0 0
#define TCNT0_1 1
#define TCNT0_2 2
#define TCNT0_3 3
#define TCNT0_4 4
#define TCNT0_5 5
#define TCNT0_6 6
#define TCNT0_7 7

#define OCR0A _SFR_IO8(0x27)
#define OCR0A_0 0
#define OCR0A_1 1
#define OCR0A_2 2
#define OCR0A_3 3
#define OCR0A_4 4
#define OCR0A_5 5
#define OCR0A_6 6
#define OCR0A_7 7

#define OCR0B _SFR_IO8(0x28)
#define OCR0B_0 0
#define OCR0B_1 1
#define OCR0B_2 2
#define OCR0B_3 3
#define OCR0B_4 4
#define OCR0B_5 5
#define OCR0B_6 6
#define OCR0B_7 7

#define GPIOR1 _SFR_IO8(0x2A)
#define GPIOR10 0
#define GPIOR11 1
#define GPIOR12 2
#define GPIOR13 3
#define GPIOR14 4
#define GPIOR15 5
#define GPIOR16 6
#define GPIOR17 7

#define GPIOR2 _SFR_IO8(0x2B)
#define GPIOR20 0
#define GPIOR21 1
#define GPIOR22 2
#define GPIOR23 3
#define GPIOR24 4
#define GPIOR25 5
#define GPIOR26 6
#define GPIOR27 7

#define SPCR _SFR_IO8(0x2C)
#define SPR0 0
#define SPR1 1
#define CPHA 2
#define CPOL 3
#define MSTR 4
#define DORD 5
#define SPE 6
#define SPIE 7

#define SPSR _SFR_IO8(0x2D)
#define SPI2X 0
#define WCOL 6
#define SPIF 7

#define SPDR _SFR_IO8(0x2E)
#define SPDR0 0
#define SPDR1 1
#define SPDR2 2
#define SPDR3 3
#define SPDR4 4
#define SPDR5 5
#define SPDR6 6
#define SPDR7 7

#define ACSR _SFR_IO8(0x30)
#define ACIS0 0
#define ACIS1 1
#define ACIC 2
#define ACIE 3
#define ACI 4
#define ACO 5
#define ACBG 6
#define ACD 7

#define SMCR _SFR_IO8(0x33)
#define SE 0
#define SM0 1
#define SM1 2
#define SM2 3

#define MCUSR _SFR_IO8(0x34)
#define PORF 0
#define EXTRF 1
#define BORF 2
#define WDRF 3

#define MCUCR _SFR_IO8(0x35)
#define IVCE 0
#define IVSEL 1
#define PUD 4
#define BODSE 5
#define BODS 6

#define SPMCSR _SFR_IO8(0x37)
#define SELFPRGEN 0

#define SPMEN 0
#define PGERS 1
#define PGWRT 2
#define BLBSET 3
#define RWWSRE 4
#define SIGRD 5
#define RWWSB 6
#define SPMIE 7

#define WDTCSR _SFR_MEM8(0x60)
#define WDP0 0
#define WDP1 1
#define WDP2 2
#define WDE 3
#define WDCE 4
#define WDP3 5
#define WDIE 6
#define WDIF 7

#define CLKPR _SFR_MEM8(0x61)
#define CLKPS0 0
#define CLKPS1 1
#define CLKPS2 2
#define CLKPS3 3
#define CLKPCE 7

#define PRR _SFR_MEM8(0x64)
#define PRADC 0
#define PRUSART0 1
#define PRSPI 2
#define PRTIM1 3
#define PRTIM0 5
#define PRTIM2 6
#define PRTWI 7

#define __AVR_HAVE_PRR ((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI))
#define __AVR_HAVE_PRR_PRADC 
#define __AVR_HAVE_PRR_PRUSART0 
#define __AVR_HAVE_PRR_PRSPI 
#define __AVR_HAVE_PRR_PRTIM1 
#define __AVR_HAVE_PRR_PRTIM0 
#define __AVR_HAVE_PRR_PRTIM2 
#define __AVR_HAVE_PRR_PRTWI 

#define OSCCAL _SFR_MEM8(0x66)
#define CAL0 0
#define CAL1 1
#define CAL2 2
#define CAL3 3
#define CAL4 4
#define CAL5 5
#define CAL6 6
#define CAL7 7

#define PCICR _SFR_MEM8(0x68)
#define PCIE0 0
#define PCIE1 1
#define PCIE2 2

#define EICRA _SFR_MEM8(0x69)
#define ISC00 0
#define ISC01 1
#define ISC10 2
#define ISC11 3

#define PCMSK0 _SFR_MEM8(0x6B)
#define PCINT0 0
#define PCINT1 1
#define PCINT2 2
#define PCINT3 3
#define PCINT4 4
#define PCINT5 5
#define PCINT6 6
#define PCINT7 7

#define PCMSK1 _SFR_MEM8(0x6C)
#define PCINT8 0
#define PCINT9 1
#define PCINT10 2
#define PCINT11 3
#define PCINT12 4
#define PCINT13 5
#define PCINT14 6

#define PCMSK2 _SFR_MEM8(0x6D)
#define PCINT16 0
#define PCINT17 1
#define PCINT18 2
#define PCINT19 3
#define PCINT20 4
#define PCINT21 5
#define PCINT22 6
#define PCINT23 7

#define TIMSK0 _SFR_MEM8(0x6E)
#define TOIE0 0
#define OCIE0A 1
#define OCIE0B 2

#define TIMSK1 _SFR_MEM8(0x6F)
#define TOIE1 0
#define OCIE1A 1
#define OCIE1B 2
#define ICIE1 5

#define TIMSK2 _SFR_MEM8(0x70)
#define TOIE2 0
#define OCIE2A 1
#define OCIE2B 2


#define ADC _SFR_MEM16(0x78)

#define ADCW _SFR_MEM16(0x78)

#define ADCL _SFR_MEM8(0x78)
#define ADCL0 0
#define ADCL1 1
#define ADCL2 2
#define ADCL3 3
#define ADCL4 4
#define ADCL5 5
#define ADCL6 6
#define ADCL7 7

#define ADCH _SFR_MEM8(0x79)
#define ADCH0 0
#define ADCH1 1
#define ADCH2 2
#define ADCH3 3
#define ADCH4 4
#define ADCH5 5
#define ADCH6 6
#define ADCH7 7

#define ADCSRA _SFR_MEM8(0x7A)
#define ADPS0 0
#define ADPS1 1
#define ADPS2 2
#define ADIE 3
#define ADIF 4
#define ADATE 5
#define ADSC 6
#define ADEN 7

#define ADCSRB _SFR_MEM8(0x7B)
#define ADTS0 0
#define ADTS1 1
#define ADTS2 2
#define ACME 6

#define ADMUX _SFR_MEM8(0x7C)
#define MUX0 0
#define MUX1 1
#define MUX2 2
#define MUX3 3
#define ADLAR 5
#define REFS0 6
#define REFS1 7

#define DIDR0 _SFR_MEM8(0x7E)
#define ADC0D 0
#define ADC1D 1
#define ADC2D 2
#define ADC3D 3
#define ADC4D 4
#define ADC5D 5

#define DIDR1 _SFR_MEM8(0x7F)
#define AIN0D 0
#define AIN1D 1

#define TCCR1A _SFR_MEM8(0x80)
#define WGM10 0
#define WGM11 1
#define COM1B0 4
#define COM1B1 5
#define COM1A0 6
#define COM1A1 7

#define TCCR1B _SFR_MEM8(0x81)
#define CS10 0
#define CS11 1
#define CS12 2
#define WGM12 3
#define WGM13 4
#define ICES1 6
#define ICNC1 7

#define TCCR1C _SFR_MEM8(0x82)
#define FOC1B 6
#define FOC1A 7

#define TCNT1 _SFR_MEM16(0x84)

#define TCNT1L _SFR_MEM8(0x84)
#define TCNT1L0 0
#define TCNT1L1 1
#define TCNT1L2 2
#define TCNT1L3 3
#define TCNT1L4 4
#define TCNT1L5 5
#define TCNT1L6 6
#define TCNT1L7 7

#define TCNT1H _SFR_MEM8(0x85)
#define TCNT1H0 0
#define TCNT1H1 1
#define TCNT1H2 2
#define TCNT1H3 3
#define TCNT1H4 4
#define TCNT1H5 5
#define TCNT1H6 6
#define TCNT1H7 7

#define ICR1 _SFR_MEM16(0x86)

#define ICR1L _SFR_MEM8(0x86)
#define ICR1L0 0
#define ICR1L1 1
#define ICR1L2 2
#define ICR1L3 3
#define ICR1L4 4
#define ICR1L5 5
#define ICR1L6 6
#define ICR1L7 7

#define ICR1H _SFR_MEM8(0x87)
#define ICR1H0 0
#define ICR1H1 1
#define ICR1H2 2
#define ICR1H3 3
#define ICR1H4 4
#define ICR1H5 5
#define ICR1H6 6
#define ICR1H7 7

#define OCR1A _SFR_MEM16(0x88)

#define OCR1AL _SFR_MEM8(0x88)
#define OCR1AL0 0
#define OCR1AL1 1
#define OCR1AL2 2
#define OCR1AL3 3
#define OCR1AL4 4
#define OCR1AL5 5
#define OCR1AL6 6
#define OCR1AL7 7

#define OCR1AH _SFR_MEM8(0x89)
#define OCR1AH0 0
#define OCR1AH1 1
#define OCR1AH2 2
#define OCR1AH3 3
#define OCR1AH4 4
#define OCR1AH5 5
#define OCR1AH6 6
#define OCR1AH7 7

#define OCR1B _SFR_MEM16(0x8A)

#define OCR1BL _SFR_MEM8(0x8A)
#define OCR1BL0 0
#define OCR1BL1 1
#define OCR1BL2 2
#define OCR1BL3 3
#define OCR1BL4 4
#define OCR1BL5 5
#define OCR1BL6 6
#define OCR1BL7 7

#define OCR1BH _SFR_MEM8(0x8B)
#define OCR1BH0 0
#define OCR1BH1 1
#define OCR1BH2 2
#define OCR1BH3 3
#define OCR1BH4 4
#define OCR1BH5 5
#define OCR1BH6 6
#define OCR1BH7 7

#define TCCR2A _SFR_MEM8(0xB0)
#define WGM20 0
#define WGM21 1
#define COM2B0 4
#define COM2B1 5
#define COM2A0 6
#define COM2A1 7

#define TCCR2B _SFR_MEM8(0xB1)
#define CS20 0
#define CS21 1
#define CS22 2
#define WGM22 3
#define FOC2B 6
#define FOC2A 7

#define TCNT2 _SFR_MEM8(0xB2)
#define TCNT2_0 0
#define TCNT2_1 1
#define TCNT2_2 2
#define TCNT2_3 3
#define TCNT2_4 4
#define TCNT2_5 5
#define TCNT2_6 6
#define TCNT2_7 7

#define OCR2A _SFR_MEM8(0xB3)
#define OCR2_0 0
#define OCR2_1 1
#define OCR2_2 2
#define OCR2_3 3
#define OCR2_4 4
#define OCR2_5 5
#define OCR2_6 6
#define OCR2_7 7

#define OCR2B _SFR_MEM8(0xB4)
#define OCR2_0 0
#define OCR2_1 1
#define OCR2_2 2
#define OCR2_3 3
#define OCR2_4 4
#define OCR2_5 5
#define OCR2_6 6
#define OCR2_7 7

#define ASSR _SFR_MEM8(0xB6)
#define TCR2BUB 0
#define TCR2AUB 1
#define OCR2BUB 2
#define OCR2AUB 3
#define TCN2UB 4
#define AS2 5
#define EXCLK 6

#define TWBR _SFR_MEM8(0xB8)
#define TWBR0 0
#define TWBR1 1
#define TWBR2 2
#define TWBR3 3
#define TWBR4 4
#define TWBR5 5
#define TWBR6 6
#define TWBR7 7

#define TWSR _SFR_MEM8(0xB9)
#define TWPS0 0
#define TWPS1 1
#define TWS3 3
#define TWS4 4
#define TWS5 5
#define TWS6 6
#define TWS7 7

#define TWAR _SFR_MEM8(0xBA)
#define TWGCE 0
#define TWA0 1
#define TWA1 2
#define TWA2 3
#define TWA3 4
#define TWA4 5
#define TWA5 6
#define TWA6 7

#define TWDR _SFR_MEM8(0xBB)
#define TWD0 0
#define TWD1 1
#define TWD2 2
#define TWD3 3
#define TWD4 4
#define TWD5 5
#define TWD6 6
#define TWD7 7

#define TWCR _SFR_MEM8(0xBC)
#define TWIE 0
#define TWEN 2
#define TWWC 3
#define TWSTO 4
#define TWSTA 5
#define TWEA 6
#define TWINT 7

#define TWAMR _SFR_MEM8(0xBD)
#define TWAM0 0
#define TWAM1 1
#define TWAM2 2
#define TWAM3 3
#define TWAM4 4
#define TWAM5 5
#define TWAM6 6

#define UCSR0A _SFR_MEM8(0xC0)
#define MPCM0 0
#define U2X0 1
#define UPE0 2
#define DOR0 3
#define FE0 4
#define UDRE0 5
#define TXC0 6
#define RXC0 7

#define UCSR0B _SFR_MEM8(0xC1)
#define TXB80 0
#define RXB80 1
#define UCSZ02 2
#define TXEN0 3
#define RXEN0 4
#define UDRIE0 5
#define TXCIE0 6
#define RXCIE0 7

#define UCSR0C _SFR_MEM8(0xC2)
#define UCPOL0 0
#define UCSZ00 1
#define UCPHA0 1
#define UCSZ01 2
#define UDORD0 2
#define USBS0 3
#define UPM00 4
#define UPM01 5
#define UMSEL00 6
#define UMSEL01 7

#define UBRR0 _SFR_MEM16(0xC4)

#define UBRR0L _SFR_MEM8(0xC4)
#define UBRR0_0 0
#define UBRR0_1 1
#define UBRR0_2 2
#define UBRR0_3 3
#define UBRR0_4 4
#define UBRR0_5 5
#define UBRR0_6 6
#define UBRR0_7 7

#define UBRR0H _SFR_MEM8(0xC5)
#define UBRR0_8 0
#define UBRR0_9 1
#define UBRR0_10 2
#define UBRR0_11 3

#define UDR0 _SFR_MEM8(0xC6)
#define UDR0_0 0
#define UDR0_1 1
#define UDR0_2 2
#define UDR0_3 3
#define UDR0_4 4
#define UDR0_5 5
#define UDR0_6 6
#define UDR0_7 7






#define INT0_vect_num 1
#define INT0_vect _VECTOR(1)

#define INT1_vect_num 2
#define INT1_vect _VECTOR(2)

#define PCINT0_vect_num 3
#define PCINT0_vect _VECTOR(3)

#define PCINT1_vect_num 4
#define PCINT1_vect _VECTOR(4)

#define PCINT2_vect_num 5
#define PCINT2_vect _VECTOR(5)

#define WDT_vect_num 6
#define WDT_vect _VECTOR(6)

#define TIMER2_COMPA_vect_num 7
#define TIMER2_COMPA_vect _VECTOR(7)

#define TIMER2_COMPB_vect_num 8
#define TIMER2_COMPB_vect _VECTOR(8)

#define TIMER2_OVF_vect_num 9
#define TIMER2_OVF_vect _VECTOR(9)

#define TIMER1_CAPT_vect_num 10
#define TIMER1_CAPT_vect _VECTOR(10)

#define TIMER1_COMPA_vect_num 11
#define TIMER1_COMPA_vect _VECTOR(11)

#define TIMER1_COMPB_vect_num 12
#define TIMER1_COMPB_vect _VECTOR(12)

#define TIMER1_OVF_vect_num 13
#define TIMER1_OVF_vect _VECTOR(13)

#define TIMER0_COMPA_vect_num 14
#define TIMER0_COMPA_vect _VECTOR(14)

#define TIMER0_COMPB_vect_num 15
#define TIMER0_COMPB_vect _VECTOR(15)

#define TIMER0_OVF_vect_num 16
#define TIMER0_OVF_vect _VECTOR(16)

#define SPI_STC_vect_num 17
#define SPI_STC_vect _VECTOR(17)

#define USART_RX_vect_num 18
#define USART_RX_vect _VECTOR(18)

#define USART_UDRE_vect_num 19
#define USART_UDRE_vect _VECTOR(19)

#define USART_TX_vect_num 20
#define USART_TX_vect _VECTOR(20)

#define ADC_vect_num 21
#define ADC_vect _VECTOR(21)

#define EE_READY_vect_num 22
#define EE_READY_vect _VECTOR(22)

#define ANALOG_COMP_vect_num 23
#define ANALOG_COMP_vect _VECTOR(23)

#define TWI_vect_num 24
#define TWI_vect _VECTOR(24)

#define SPM_READY_vect_num 25
#define SPM_READY_vect _VECTOR(25)

#define _VECTORS_SIZE (26 * 4)




#define SPM_PAGESIZE 128
#define RAMSTART (0x100)
#define RAMEND 0x8FF
#define XRAMSIZE 0
#define XRAMEND RAMEND
#define E2END 0x3FF
#define E2PAGESIZE 4
#define FLASHEND 0x7FFF




#define FUSE_MEMORY_SIZE 3


#define FUSE_CKSEL0 (unsigned char)~_BV(0)
#define FUSE_CKSEL1 (unsigned char)~_BV(1)
#define FUSE_CKSEL2 (unsigned char)~_BV(2)
#define FUSE_CKSEL3 (unsigned char)~_BV(3)
#define FUSE_SUT0 (unsigned char)~_BV(4)
#define FUSE_SUT1 (unsigned char)~_BV(5)
#define FUSE_CKOUT (unsigned char)~_BV(6)
#define FUSE_CKDIV8 (unsigned char)~_BV(7)
#define LFUSE_DEFAULT (FUSE_CKSEL0 & FUSE_CKSEL2 & FUSE_CKSEL3 & FUSE_SUT0 & FUSE_CKDIV8)


#define FUSE_BOOTRST (unsigned char)~_BV(0)
#define FUSE_BOOTSZ0 (unsigned char)~_BV(1)
#define FUSE_BOOTSZ1 (unsigned char)~_BV(2)
#define FUSE_EESAVE (unsigned char)~_BV(3)
#define FUSE_WDTON (unsigned char)~_BV(4)
#define FUSE_SPIEN (unsigned char)~_BV(5)
#define FUSE_DWEN (unsigned char)~_BV(6)
#define FUSE_RSTDISBL (unsigned char)~_BV(7)
#define HFUSE_DEFAULT (FUSE_BOOTSZ0 & FUSE_BOOTSZ1 & FUSE_SPIEN)


#define FUSE_BODLEVEL0 (unsigned char)~_BV(0)
#define FUSE_BODLEVEL1 (unsigned char)~_BV(1)
#define FUSE_BODLEVEL2 (unsigned char)~_BV(2)
#define EFUSE_DEFAULT (0xFF)




#define __LOCK_BITS_EXIST 
#define __BOOT_LOCK_BITS_0_EXIST 
#define __BOOT_LOCK_BITS_1_EXIST 



#define SIGNATURE_0 0x1E
#define SIGNATURE_1 0x95



#define SIGNATURE_2 0x0F


#define SLEEP_MODE_IDLE (0x00<<1)
#define SLEEP_MODE_ADC (0x01<<1)
#define SLEEP_MODE_PWR_DOWN (0x02<<1)
#define SLEEP_MODE_PWR_SAVE (0x03<<1)
#define SLEEP_MODE_STANDBY (0x06<<1)
#define SLEEP_MODE_EXT_STANDBY (0x07<<1)
# 273 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 627 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 1 3
# 34 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 3
#define _AVR_PORTPINS_H_ 1
# 45 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 3
#define PORT7 7
#define PORT6 6
#define PORT5 5
#define PORT4 4
#define PORT3 3
#define PORT2 2
#define PORT1 1
#define PORT0 0


#define DD7 7
#define DD6 6
#define DD5 5
#define DD4 4
#define DD3 3
#define DD2 2
#define DD1 1
#define DD0 0


#define PIN7 7
#define PIN6 6
#define PIN5 5
#define PIN4 4
#define PIN3 3
#define PIN2 2
#define PIN1 1
#define PIN0 0
# 124 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 3
#define PB0 PORTB0




#define PB1 PORTB1




#define PB2 PORTB2




#define PB3 PORTB3




#define PB4 PORTB4




#define PB5 PORTB5




#define PB6 PORTB6




#define PB7 PORTB7







#define PC0 PORTC0




#define PC1 PORTC1




#define PC2 PORTC2




#define PC3 PORTC3




#define PC4 PORTC4




#define PC5 PORTC5




#define PC6 PORTC6
# 210 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 3
#define PD0 PORTD0




#define PD1 PORTD1




#define PD2 PORTD2




#define PD3 PORTD3




#define PD4 PORTD4




#define PD5 PORTD5




#define PD6 PORTD6




#define PD7 PORTD7
# 628 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 1 3
# 35 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 3
#define _AVR_COMMON_H 
# 81 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 3
#define SPL _SFR_IO8(0x3D)







#define SP _SFR_IO16(0x3D)


#define SPH _SFR_IO8(0x3E)
# 103 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 3
#define SREG _SFR_IO8(0x3F)






#define SREG_C (0)


#define SREG_Z (1)


#define SREG_N (2)


#define SREG_V (3)


#define SREG_S (4)


#define SREG_H (5)


#define SREG_T (6)


#define SREG_I (7)
# 215 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 3
#define XL r26
#define XH r27
#define YL r28
#define YH r29

#define ZL r30
#define ZH r31




#define AVR_STATUS_REG SREG



#define AVR_STATUS_ADDR _SFR_IO_ADDR(SREG)





#define AVR_STACK_POINTER_REG SP



#define AVR_STACK_POINTER_ADDR _SFR_IO_ADDR(SP)





#define _HAVE_AVR_STACK_POINTER_HI 1
#define AVR_STACK_POINTER_HI_REG SPH



#define AVR_STACK_POINTER_HI_ADDR _SFR_IO_ADDR(SPH)





#define AVR_STACK_POINTER_LO_REG SPL



#define AVR_STACK_POINTER_LO_ADDR _SFR_IO_ADDR(SPL)
# 630 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\version.h" 1 3
# 54 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\version.h" 3
#define _AVR_VERSION_H_ 



#define __AVR_LIBC_VERSION_STRING__ "2.0.0"
# 68 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\version.h" 3
#define __AVR_LIBC_VERSION__ 20000UL



#define __AVR_LIBC_DATE_STRING__ "20150208"



#define __AVR_LIBC_DATE_ 20150208UL



#define __AVR_LIBC_MAJOR__ 2



#define __AVR_LIBC_MINOR__ 0



#define __AVR_LIBC_REVISION__ 0
# 632 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 1 3
# 36 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 3
#define _AVR_FUSE_H_ 1
# 226 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 3
#define FUSEMEM __attribute__((__used__, __section__ (".fuse")))
# 239 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 267 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 3
#define FUSES __fuse_t __fuse FUSEMEM
# 639 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\lock.h" 1 3
# 36 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\lock.h" 3
#define _AVR_LOCK_H_ 1
# 190 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\lock.h" 3
#define LOCKMEM __attribute__((__used__, __section__ (".lock")))



#define LOCKBITS unsigned char __lock LOCKMEM




#define LB_MODE_1 (0xFF)
#define LB_MODE_2 (0xFE)
#define LB_MODE_3 (0xFC)



#define BLB0_MODE_1 (0xFF)
#define BLB0_MODE_2 (0xFB)
#define BLB0_MODE_3 (0xF3)
#define BLB0_MODE_4 (0xF7)



#define BLB1_MODE_1 (0xFF)
#define BLB1_MODE_2 (0xEF)
#define BLB1_MODE_3 (0xCF)
#define BLB1_MODE_4 (0xDF)
# 234 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\lock.h" 3
#define LOCKBITS_DEFAULT (0xFF)
# 642 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 41 "../src/ASF/mega/utils/compiler.h" 2







# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdbool.h" 1 3 4
# 29 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdbool.h" 3 4
#define _STDBOOL_H 



#define bool _Bool
#define true 1
#define false 0
# 52 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdbool.h" 3 4
#define __bool_true_false_are_defined 1
# 49 "../src/ASF/mega/utils/compiler.h" 2

# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 39 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef int ptrdiff_t;
# 161 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 187 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 





typedef unsigned int size_t;
# 238 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_size_t
# 267 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 328 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef int wchar_t;
# 347 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 51 "../src/ASF/mega/utils/compiler.h" 2
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 1 3
# 40 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
#define _STDLIB_H_ 1




#define __need_NULL 
#define __need_size_t 
#define __need_wchar_t 
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 161 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_size_t
# 347 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 49 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 2 3


#define __ptr_t void *
# 70 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
typedef struct {
 int quot;
 int rem;
} div_t;


typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef int (*__compar_fn_t)(const void *, const void *);




#define __ATTR_CONST__ __attribute__((__const__))



#define __ATTR_MALLOC__ __attribute__((__malloc__))



#define __ATTR_NORETURN__ __attribute__((__noreturn__))



#define __ATTR_PURE__ __attribute__((__pure__))




#define __ATTR_GNU_INLINE__ __attribute__((__gnu_inline__))
# 116 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void abort(void) __attribute__((__noreturn__));




extern int abs(int __i) __attribute__((__const__));

#define abs(__i) __builtin_abs(__i)






extern long labs(long __i) __attribute__((__const__));

#define labs(__i) __builtin_labs(__i)
# 153 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
       size_t __size, int (*__compar)(const void *, const void *));







extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __attribute__((__const__));





extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __attribute__((__const__));
# 185 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void qsort(void *__base, size_t __nmemb, size_t __size,
    __compar_fn_t __compar);
# 218 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern long strtol(const char *__nptr, char **__endptr, int __base);
# 252 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
# 264 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern long atol(const char *__s) __attribute__((__pure__));
# 276 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern int atoi(const char *__s) __attribute__((__pure__));
# 288 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void exit(int __status) __attribute__((__noreturn__));
# 300 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void *malloc(size_t __size) __attribute__((__malloc__));






extern void free(void *__ptr);




extern size_t __malloc_margin;




extern char *__malloc_heap_start;




extern char *__malloc_heap_end;






extern void *calloc(size_t __nele, size_t __size) __attribute__((__malloc__));
# 348 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void *realloc(void *__ptr, size_t __size) __attribute__((__malloc__));

extern double strtod(const char *__nptr, char **__endptr);
# 361 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern double atof(const char *__nptr);


#define RAND_MAX 0x7FFF
# 383 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern int rand(void);



extern void srand(unsigned int __seed);






extern int rand_r(unsigned long *__ctx);
# 428 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__itoa (int, char *, int);
 return __itoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__itoa_ncheck (int, char *, unsigned char);
 return __itoa_ncheck (__val, __s, __radix);
    }
}
# 473 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ltoa (long, char *, int);
 return __ltoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ltoa_ncheck (long, char *, unsigned char);
 return __ltoa_ncheck (__val, __s, __radix);
    }
}
# 516 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__utoa (unsigned int, char *, int);
 return __utoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
 return __utoa_ncheck (__val, __s, __radix);
    }
}
# 558 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ultoa (unsigned long, char *, int);
 return __ultoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
 return __ultoa_ncheck (__val, __s, __radix);
    }
}




#define RANDOM_MAX 0x7FFFFFFF
# 590 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern long random(void);




extern void srandom(unsigned long __seed);







extern long random_r(unsigned long *__ctx);
# 617 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
#define DTOSTR_ALWAYS_SIGN 0x01


#define DTOSTR_PLUS_SIGN 0x02


#define DTOSTR_UPPERCASE 0x04
# 649 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern char *dtostre(double __val, char *__s, unsigned char __prec,
       unsigned char __flags);
# 666 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern char *dtostrf(double __val, signed char __width,
                     unsigned char __prec, char *__s);





#define EXIT_SUCCESS 0





#define EXIT_FAILURE 1





extern int atexit(void (*)(void));
extern int system (const char *);
extern char *getenv (const char *);
# 52 "../src/ASF/mega/utils/compiler.h" 2
# 71 "../src/ASF/mega/utils/compiler.h"
#define UNUSED(v) (void)(v)





#define unused(v) do { (void)(v); } while(0)






#define barrier() asm volatile("" ::: "memory")







#define COMPILER_PACK_RESET(alignment) 
#define COMPILER_PACK_SET(alignment) 
# 107 "../src/ASF/mega/utils/compiler.h"
#define __always_inline inline __attribute__((__always_inline__))
# 121 "../src/ASF/mega/utils/compiler.h"
#define __always_optimize __attribute__((optimize(3)))
# 147 "../src/ASF/mega/utils/compiler.h"
#define Assert(expr) ((void) 0)






#define MSB(u16) (((uint8_t* )&u16)[1])
#define LSB(u16) (((uint8_t* )&u16)[0])


# 1 "../src/ASF/common/utils/interrupt.h" 1
# 37 "../src/ASF/common/utils/interrupt.h"
#define UTILS_INTERRUPT_H 




# 1 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 1
# 37 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
#define UTILS_INTERRUPT_INTERRUPT_H 

# 1 "../src/ASF/mega/utils/compiler.h" 1
# 40 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 2
# 69 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 1 3
# 36 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define _AVR_INTERRUPT_H_ 





#define __STRINGIFY(x) #x
# 81 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define sei() __asm__ __volatile__ ("sei" ::: "memory")
# 99 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define cli() __asm__ __volatile__ ("cli" ::: "memory")
# 129 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define __INTR_ATTRS used, externally_visible
# 139 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define ISR(vector,...) void vector (void) __attribute__ ((signal,__INTR_ATTRS)) __VA_ARGS__; void vector (void)
# 164 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define SIGNAL(vector) void vector (void) __attribute__ ((signal, __INTR_ATTRS)); void vector (void)
# 188 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define EMPTY_INTERRUPT(vector) void vector (void) __attribute__ ((signal,naked,__INTR_ATTRS)); void vector (void) { __asm__ __volatile__ ("reti" ::); }
# 239 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define ISR_ALIAS(vector,tgt) void vector (void) __attribute__((signal, naked, __INTR_ATTRS)); void vector (void) { asm volatile ("jmp " __STRINGIFY(tgt) ::); }
# 264 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define reti() __asm__ __volatile__ ("reti" ::)
# 280 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define BADISR_vect __vector_default
# 336 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 3
#define ISR_BLOCK 
#define ISR_NOBLOCK __attribute__((interrupt))
#define ISR_NAKED __attribute__((naked))
#define ISR_ALIASOF(v) __attribute__((alias(__STRINGIFY(v))))
# 70 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 2
# 89 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
#define cpu_irq_enable() sei()
#define cpu_irq_disable() cli()






# 96 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
 volatile irqflags_t flags = 
# 100 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 3
                            (*(volatile uint8_t *)((0x3F) + 0x20))
# 100 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
                                ;
 
# 101 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 3
__asm__ __volatile__ ("cli" ::: "memory")
# 101 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
                 ;
 return flags;
}

static inline void cpu_irq_restore(irqflags_t flags)
{
 asm volatile("" ::: "memory");
 
# 108 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 3
(*(volatile uint8_t *)((0x3F) + 0x20)) 
# 108 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
     = flags;
}

static inline 
# 111 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 3 4
             _Bool 
# 111 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
                  cpu_irq_is_enabled_flags(irqflags_t flags)
{







 return flags & (1 << 
# 120 "../src/ASF/common/utils/interrupt/interrupt_avr8.h" 3
                     (7)
# 120 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
                           );

}

#define cpu_irq_is_enabled() cpu_irq_is_enabled_flags(SREG)
# 133 "../src/ASF/common/utils/interrupt/interrupt_avr8.h"
#define Enable_global_interrupt() cpu_irq_enable()
#define Disable_global_interrupt() cpu_irq_disable()
#define Is_global_interrupt_enabled() cpu_irq_is_enabled()
# 43 "../src/ASF/common/utils/interrupt.h" 2
# 159 "../src/ASF/mega/utils/compiler.h" 2
# 1 "../src/ASF/mega/utils/progmem.h" 1
# 38 "../src/ASF/mega/utils/progmem.h"
#define UTILS_PROGMEM_H 
# 55 "../src/ASF/mega/utils/progmem.h"
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 1 3
# 83 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __PGMSPACE_H_ 1


#define __need_size_t 


# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 161 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_size_t
# 347 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 90 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 2 3
# 98 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __ATTR_PROGMEM__ __attribute__((__progmem__))
# 113 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define PROGMEM __ATTR_PROGMEM__
# 378 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define PGM_P const char *



#define PGM_VOID_P const void *
# 408 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define PSTR(s) (__extension__({static const char __c[] PROGMEM = (s); &__c[0];}))



#define __LPM_classic__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); uint8_t __result; __asm__ __volatile__ ( "lpm" "\n\t" "mov %0, r0" "\n\t" : "=r" (__result) : "z" (__addr16) : "r0" ); __result; }))
# 427 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_tiny__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr) + __AVR_TINY_PM_BASE_ADDRESS__; uint8_t __result; __asm__ ( "ld %0, z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 440 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_enhanced__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 453 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_word_classic__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); uint16_t __result; __asm__ __volatile__ ( "lpm" "\n\t" "mov %A0, r0" "\n\t" "adiw r30, 1" "\n\t" "lpm" "\n\t" "mov %B0, r0" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) : "r0" ); __result; }))
# 471 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_word_tiny__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr) + __AVR_TINY_PM_BASE_ADDRESS__; uint16_t __result; __asm__ ( "ld %A0, z+" "\n\t" "ld %B0, z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 485 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_word_enhanced__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 499 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_dword_classic__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); uint32_t __result; __asm__ __volatile__ ( "lpm" "\n\t" "mov %A0, r0" "\n\t" "adiw r30, 1" "\n\t" "lpm" "\n\t" "mov %B0, r0" "\n\t" "adiw r30, 1" "\n\t" "lpm" "\n\t" "mov %C0, r0" "\n\t" "adiw r30, 1" "\n\t" "lpm" "\n\t" "mov %D0, r0" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) : "r0" ); __result; }))
# 523 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_dword_tiny__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr) + __AVR_TINY_PM_BASE_ADDRESS__; uint32_t __result; __asm__ ( "ld %A0, z+" "\n\t" "ld %B0, z+" "\n\t" "ld %C0, z+" "\n\t" "ld %D0, z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 539 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_dword_enhanced__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); uint32_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z+" "\n\t" "lpm %C0, Z+" "\n\t" "lpm %D0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 555 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_float_classic__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); float __result; __asm__ __volatile__ ( "lpm" "\n\t" "mov %A0, r0" "\n\t" "adiw r30, 1" "\n\t" "lpm" "\n\t" "mov %B0, r0" "\n\t" "adiw r30, 1" "\n\t" "lpm" "\n\t" "mov %C0, r0" "\n\t" "adiw r30, 1" "\n\t" "lpm" "\n\t" "mov %D0, r0" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) : "r0" ); __result; }))
# 579 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_float_tiny__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr) + __AVR_TINY_PM_BASE_ADDRESS__; float __result; __asm__ ( "ld %A0, z+" "\n\t" "ld %B0, z+" "\n\t" "ld %C0, z+" "\n\t" "ld %D0, z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 595 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM_float_enhanced__(addr) (__extension__({ uint16_t __addr16 = (uint16_t)(addr); float __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z+" "\n\t" "lpm %C0, Z+" "\n\t" "lpm %D0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))
# 612 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define __LPM(addr) __LPM_enhanced__(addr)
#define __LPM_word(addr) __LPM_word_enhanced__(addr)
#define __LPM_dword(addr) __LPM_dword_enhanced__(addr)
#define __LPM_float(addr) __LPM_float_enhanced__(addr)
# 645 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_byte_near(address_short) __LPM((uint16_t)(address_short))







#define pgm_read_word_near(address_short) __LPM_word((uint16_t)(address_short))







#define pgm_read_dword_near(address_short) __LPM_dword((uint16_t)(address_short))
# 670 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_float_near(address_short) __LPM_float((uint16_t)(address_short))
# 679 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_ptr_near(address_short) (void*)__LPM_word((uint16_t)(address_short))
# 1055 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_byte(address_short) pgm_read_byte_near(address_short)
# 1064 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_word(address_short) pgm_read_word_near(address_short)
# 1073 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_dword(address_short) pgm_read_dword_near(address_short)
# 1082 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_float(address_short) pgm_read_float_near(address_short)
# 1091 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_read_ptr(address_short) pgm_read_ptr_near(address_short)
# 1126 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
#define pgm_get_far_address(var) ({ uint_farptr_t tmp; __asm__ __volatile__( "ldi	%A0, lo8(%1)" "\n\t" "ldi	%B0, hi8(%1)" "\n\t" "ldi	%C0, hh8(%1)" "\n\t" "clr	%D0" "\n\t" : "=d" (tmp) : "p" (&(var)) ); tmp; })
# 1158 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3

# 1158 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern const void * memchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1172 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int memcmp_P(const void *, const void *, size_t) __attribute__((__pure__));






extern void *memccpy_P(void *, const void *, int __val, size_t);
# 1188 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern void *memcpy_P(void *, const void *, size_t);






extern void *memmem_P(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 1207 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern const void * memrchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1217 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strcat_P(char *, const char *);
# 1233 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern const char * strchr_P(const char *, int __val) __attribute__((__const__));
# 1245 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern const char * strchrnul_P(const char *, int __val) __attribute__((__const__));
# 1258 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strcmp_P(const char *, const char *) __attribute__((__pure__));
# 1268 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strcpy_P(char *, const char *);
# 1285 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strcasecmp_P(const char *, const char *) __attribute__((__pure__));






extern char *strcasestr_P(const char *, const char *) __attribute__((__pure__));
# 1305 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strcspn_P(const char *__s, const char * __reject) __attribute__((__pure__));
# 1321 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strlcat_P (char *, const char *, size_t );
# 1334 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strlcpy_P (char *, const char *, size_t );
# 1346 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strnlen_P(const char *, size_t) __attribute__((__const__));
# 1357 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strncmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1376 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strncasecmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1387 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strncat_P(char *, const char *, size_t);
# 1401 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strncpy_P(char *, const char *, size_t);
# 1416 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strpbrk_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1427 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern const char * strrchr_P(const char *, int __val) __attribute__((__const__));
# 1447 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strsep_P(char **__sp, const char * __delim);
# 1460 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strspn_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1474 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strstr_P(const char *, const char *) __attribute__((__pure__));
# 1496 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strtok_P(char *__s, const char * __delim);
# 1516 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strtok_rP(char *__s, const char * __delim, char **__last);
# 1529 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strlen_PF(uint_farptr_t src) __attribute__((__const__));
# 1545 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strnlen_PF(uint_farptr_t src, size_t len) __attribute__((__const__));
# 1560 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern void *memcpy_PF(void *dest, uint_farptr_t src, size_t len);
# 1575 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strcpy_PF(char *dest, uint_farptr_t src);
# 1595 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strncpy_PF(char *dest, uint_farptr_t src, size_t len);
# 1611 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strcat_PF(char *dest, uint_farptr_t src);
# 1632 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strlcat_PF(char *dst, uint_farptr_t src, size_t siz);
# 1649 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strncat_PF(char *dest, uint_farptr_t src, size_t len);
# 1665 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strcmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1682 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1698 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strcasecmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1716 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1732 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern char *strstr_PF(const char *s1, uint_farptr_t s2);
# 1744 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz);
# 1760 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern int memcmp_PF(const void *, uint_farptr_t, size_t) __attribute__((__pure__));
# 1779 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\pgmspace.h" 3
extern size_t __strlen_P(const char *) __attribute__((__const__));
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
}
# 56 "../src/ASF/mega/utils/progmem.h" 2
#define PROGMEM_LOCATION(type,name,loc) type name __attribute__((section (#loc)))

#define PROGMEM_DECLARE(type,name) const type name __attribute__((__progmem__))
#define PROGMEM_STRING(x) PSTR(x)
#define PROGMEM_STRING_T PGM_P
#define PROGMEM_T const
#define PROGMEM_PTR_T const *
#define PROGMEM_BYTE_ARRAY_T uint8_t*
#define PROGMEM_WORD_ARRAY_T uint16_t*
#define PROGMEM_READ_BYTE(x) pgm_read_byte(x)
#define PROGMEM_READ_WORD(x) pgm_read_word(x)
# 160 "../src/ASF/mega/utils/compiler.h" 2


#define SHORTENUM __attribute__ ((packed))





#define FUNC_PTR void *
# 179 "../src/ASF/mega/utils/compiler.h"
#define FLASH_DECLARE(x) const x __attribute__((__progmem__))





#define FLASH_EXTERN(x) extern const x






#define CMD_ID_OCTET (0)


#define CPU_ENDIAN_TO_LE16(x) (x)
#define CPU_ENDIAN_TO_LE32(x) (x)
#define CPU_ENDIAN_TO_LE64(x) (x)


#define LE16_TO_CPU_ENDIAN(x) (x)
#define LE32_TO_CPU_ENDIAN(x) (x)
#define LE64_TO_CPU_ENDIAN(x) (x)


#define CLE16_TO_CPU_ENDIAN(x) (x)
#define CLE32_TO_CPU_ENDIAN(x) (x)
#define CLE64_TO_CPU_ENDIAN(x) (x)


#define CCPU_ENDIAN_TO_LE16(x) (x)
#define CCPU_ENDIAN_TO_LE32(x) (x)
#define CCPU_ENDIAN_TO_LE64(x) (x)


#define ADDR_COPY_DST_SRC_16(dst,src) memcpy((&(dst)), (&(src)), sizeof(uint16_t))
#define ADDR_COPY_DST_SRC_64(dst,src) memcpy((&(dst)), (&(src)), sizeof(uint64_t))


#define convert_byte_array_to_16_bit(data) (*(uint16_t *)(data))



#define convert_byte_array_to_32_bit(data) (*(uint32_t *)(data))



#define convert_byte_array_to_64_bit(data) (*(uint64_t *)(data))



#define convert_16_bit_to_byte_array(value,data) ((*(uint16_t *)(data)) = (uint16_t)(value))



#define convert_spec_16_bit_to_byte_array(value,data) ((*(uint16_t *)(data)) = (uint16_t)(value))



#define convert_16_bit_to_byte_address(value,data) ((*(uint16_t *)(data)) = (uint16_t)(value))



#define convert_32_bit_to_byte_array(value,data) ((*(uint32_t *)(data)) = (uint32_t)(value))




#define convert_64_bit_to_byte_array(value,data) memcpy((data), (&(value)), sizeof(uint64_t))
# 288 "../src/ASF/mega/utils/compiler.h"
#define MEMCPY_ENDIAN memcpy
#define PGM_READ_BLOCK(dst,src,len) memcpy_P((dst), (src), (len))


#define PGM_READ_BYTE(x) pgm_read_byte(x)
#define PGM_READ_WORD(x) pgm_read_word(x)







# 300 "../src/ASF/mega/utils/compiler.h"
typedef uint8_t U8 ;
typedef uint16_t U16;
typedef uint32_t U32;
typedef unsigned long long int U64;
# 313 "../src/ASF/mega/utils/compiler.h"
#define Swap16(u16) ((U16)(((U16)(u16) >> 8) | ((U16)(u16) << 8)))
# 324 "../src/ASF/mega/utils/compiler.h"
#define Swap32(u32) ((U32)(((U32)Swap16((U32)(u32) >> 16)) | ((U32)Swap16((U32)(u32)) << 16)))
# 335 "../src/ASF/mega/utils/compiler.h"
#define Swap64(u64) ((U64)(((U64)Swap32((U64)(u64) >> 32)) | ((U64)Swap32((U64)(u64)) << 32)))



#define nop() do { __asm__ __volatile__ ("nop"); } while (0)





#define FORCE_INLINE(type,name,...) static inline type name(__VA_ARGS__) __attribute__((always_inline)); static inline type name(__VA_ARGS__)
# 41 "../src/ASF/common/services/gpio/mega_gpio/mega_gpio.h" 2
# 1 "../src/ASF/common/services/ioport/ioport.h" 1
# 38 "../src/ASF/common/services/ioport/ioport.h"
#define IOPORT_H 
# 76 "../src/ASF/common/services/ioport/ioport.h"
enum ioport_direction {
 IOPORT_DIR_INPUT,
 IOPORT_DIR_OUTPUT,
};


enum ioport_value {
 IOPORT_PIN_LEVEL_LOW,
 IOPORT_PIN_LEVEL_HIGH,
};
# 112 "../src/ASF/common/services/ioport/ioport.h"
enum ioport_sense {
 IOPORT_SENSE_BOTHEDGES,
 IOPORT_SENSE_RISING,
 IOPORT_SENSE_FALLING,
};
# 126 "../src/ASF/common/services/ioport/ioport.h"
# 1 "../src/ASF/common/services/ioport/mega/ioport.h" 1
# 38 "../src/ASF/common/services/ioport/mega/ioport.h"
#define IOPORT_MEGA_RF_H 

#define IOPORT_CREATE_PIN(port,pin) ((IOPORT_ ## port) * 8 + (pin))
#define IOPORT_BASE_ADDRESS 0x20
#define IOPORT_PORT_OFFSET 0x03
# 53 "../src/ASF/common/services/ioport/mega/ioport.h"
#define IOPORT_PORTB 1
#define IOPORT_PORTC 2
#define IOPORT_PORTD 3
# 90 "../src/ASF/common/services/ioport/mega/ioport.h"
#define IOPORT_MODE_PULLDOWN (0x01)
#define IOPORT_MODE_PULLUP (0x00)


typedef uint8_t ioport_mode_t;
typedef uint16_t ioport_pin_t;
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;


typedef struct PORT_struct {
 volatile uint8_t PINCRL;
 volatile uint8_t DIR;
 volatile uint8_t PORTDATA;
} PORT_t;






typedef uint8_t pin_mask_t;






typedef uint8_t port_pin_t;







typedef uint16_t port_pin_flags_t;






typedef uint8_t port_id_t;







#define IOPORT_INIT_LOW 0 << 1
#define IOPORT_INIT_HIGH 1 << 1





#define IOPORT_PULL_DOWN (0 << 2)
#define IOPORT_PULL_UP (1 << 2)






inline __attribute__((__always_inline__)) static inline ioport_port_t arch_ioport_pin_to_port_id(
  uint8_t pin)
{
 return pin >> 3;
}





inline __attribute__((__always_inline__)) static PORT_t *arch_ioport_port_to_base(uint8_t port)
{





 {
     return (PORT_t *)((uintptr_t)(0x20 + (port * 0x03)));
 }
}





inline __attribute__((__always_inline__)) static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
 return arch_ioport_port_to_base(pin >> 3);
}





inline __attribute__((__always_inline__)) static ioport_port_mask_t arch_ioport_pin_to_mask
 (ioport_pin_t pin)
{
 return 1U << (pin & 0x07);
}
# 206 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static void arch_ioport_set_port_mode(ioport_port_t port,
  ioport_port_mask_t mask, ioport_mode_t mode)
{

 PORT_t *base = arch_ioport_port_to_base(port);
 if (mode == (0x00)) {
  base->PORTDATA = mask;
 } else if (mode == (0x01)) {
  base->PORTDATA = ~mask;
 }

}
# 228 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static void arch_ioport_set_pin_mode(ioport_pin_t pin,
  ioport_mode_t mode)
{

 PORT_t *base = arch_ioport_pin_to_base(pin);
 ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
 if (mode == (0x00)) {
  base->PORTDATA |= mask_pin;
 } else if (mode == (0x01)) {
  base->PORTDATA &= ~mask_pin;
 }

}







inline __attribute__((__always_inline__)) static void arch_ioport_set_port_dir(ioport_port_t port,
  ioport_port_mask_t mask, enum ioport_direction dir)
{
 PORT_t *base = arch_ioport_port_to_base(port);

 if (dir == IOPORT_DIR_OUTPUT) {
  base->DIR = mask;
 } else if (dir == IOPORT_DIR_INPUT) {
  base->DIR = ~mask;
 }
}







inline __attribute__((__always_inline__)) static void arch_ioport_set_pin_dir(ioport_pin_t pin,
  enum ioport_direction dir)
{
 PORT_t *base = arch_ioport_pin_to_base(pin);

 if (dir == IOPORT_DIR_OUTPUT) {
  base->DIR |= arch_ioport_pin_to_mask(pin);
 } else if (dir == IOPORT_DIR_INPUT) {
  base->DIR &= ~arch_ioport_pin_to_mask(pin);
 }
}






inline __attribute__((__always_inline__)) static void arch_ioport_set_pin_level(ioport_pin_t pin,
  
# 284 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
 _Bool 
# 284 "../src/ASF/common/services/ioport/mega/ioport.h"
      level)
{
 PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

 if (level) {
  base_add->PORTDATA
   = (base_add->PORTDATA | arch_ioport_pin_to_mask
     (pin));
 } else {
  base_add->PORTDATA
   = (base_add->PORTDATA & (~arch_ioport_pin_to_mask
     (pin)));
 }
}







inline __attribute__((__always_inline__)) static void arch_ioport_set_port_level(ioport_port_t port,
  ioport_port_mask_t mask, enum ioport_value level)
{
 PORT_t *base = arch_ioport_port_to_base(port);

 if (level) {
  base->PORTDATA |= mask;
 } else {
  base->PORTDATA &= ~mask;
 }
}






inline __attribute__((__always_inline__)) static 
# 322 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                      _Bool 
# 322 "../src/ASF/common/services/ioport/mega/ioport.h"
                           arch_ioport_get_pin_level(ioport_pin_t pin)
{
 PORT_t *base = arch_ioport_pin_to_base(pin);
 return base->PINCRL & arch_ioport_pin_to_mask(pin);
}







inline __attribute__((__always_inline__)) static ioport_port_mask_t arch_ioport_get_port_level(
  ioport_port_t port, ioport_port_mask_t mask)
{
 PORT_t *base = arch_ioport_port_to_base(port);

 return (base->PINCRL & mask);
}





inline __attribute__((__always_inline__)) static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
 PORT_t *base = arch_ioport_pin_to_base(pin);

 base->PINCRL = arch_ioport_pin_to_mask(pin);
}







inline __attribute__((__always_inline__)) static void arch_ioport_toggle_port_level(ioport_port_t port,
  ioport_port_mask_t mask)
{
 PORT_t *base = arch_ioport_port_to_base(port);

 base->PINCRL = mask;
}
# 374 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
  enum ioport_sense pin_sense)
{
 uint8_t flags = cpu_irq_save();
 port_id_t port_id = arch_ioport_pin_to_port_id(pin);
# 390 "../src/ASF/common/services/ioport/mega/ioport.h"
 if (port_id == 3 &&
   ((pin & 0x07) == 2 || (pin & 0x07) == 3)) {
  
# 392 "../src/ASF/common/services/ioport/mega/ioport.h" 3
 (*(volatile uint8_t *)(0x69)) 
# 392 "../src/ASF/common/services/ioport/mega/ioport.h"
       &= ~((0x03) << (((pin & 0x03) - 2) * 2));
  
# 393 "../src/ASF/common/services/ioport/mega/ioport.h" 3
 (*(volatile uint8_t *)(0x69)) 
# 393 "../src/ASF/common/services/ioport/mega/ioport.h"
       |= pin_sense << (((pin & 0x03) - 2) * 2);
 }
# 409 "../src/ASF/common/services/ioport/mega/ioport.h"
 cpu_irq_restore(flags);
}







inline __attribute__((__always_inline__)) static void arch_ioport_set_port_sense_mode(ioport_port_t port,
  ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
 uint8_t flags = cpu_irq_save();


 if (port == 3) {
  
# 425 "../src/ASF/common/services/ioport/mega/ioport.h" 3
 (*(volatile uint8_t *)(0x69)) 
# 425 "../src/ASF/common/services/ioport/mega/ioport.h"
       = mask;
  
# 426 "../src/ASF/common/services/ioport/mega/ioport.h" 3
 (*(volatile uint8_t *)(0x69)) 
# 426 "../src/ASF/common/services/ioport/mega/ioport.h"
       &= (pin_sense << 6) || (pin_sense << 4) ||
    (pin_sense << 2) ||
    (pin_sense);
 }


 if (port == 3) {
  
# 433 "../src/ASF/common/services/ioport/mega/ioport.h" 3
 (*(volatile uint8_t *)(0x69)) 
# 433 "../src/ASF/common/services/ioport/mega/ioport.h"
       = mask;
  
# 434 "../src/ASF/common/services/ioport/mega/ioport.h" 3
 (*(volatile uint8_t *)(0x69)) 
# 434 "../src/ASF/common/services/ioport/mega/ioport.h"
       &= (pin_sense << 2) || (pin_sense);
 }
# 446 "../src/ASF/common/services/ioport/mega/ioport.h"
 cpu_irq_restore(flags);
}







inline __attribute__((__always_inline__)) static void arch_ioport_init(void)
{
}

inline __attribute__((__always_inline__)) static void arch_ioport_enable_pin(ioport_pin_t pin)
{
}

inline __attribute__((__always_inline__)) static void arch_ioport_enable_port(ioport_port_t port,
  ioport_port_mask_t mask)
{
}

inline __attribute__((__always_inline__)) static void arch_ioport_disable_pin(ioport_pin_t pin)
{
}

inline __attribute__((__always_inline__)) static void arch_ioport_disable_port(ioport_port_t port,
  ioport_port_mask_t mask)
{
}
# 484 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
 return arch_ioport_pin_to_base(pin);
}







inline __attribute__((__always_inline__)) static inline PORT_t *ioport_id_pin_to_port(port_id_t port)
{
 return arch_ioport_port_to_base(port);
}
# 508 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline void ioport_configure_port_pin(void *port,
  pin_mask_t pin_mask,
  port_pin_flags_t flags)
{

 if (flags & IOPORT_DIR_OUTPUT) {
  if (flags & 1 << 1) {
   *((uint8_t *)port + 2) |= pin_mask;
  } else {
   *((uint8_t *)port + 2) &= ~pin_mask;
  }

  *((uint8_t *)port + 1) |= pin_mask;
 } else {
  *((uint8_t *)port + 1) &= ~pin_mask;
  if (flags & (1 << 2)) {
   *((uint8_t *)port + 2) |= pin_mask;
  } else {
   *((uint8_t *)port + 2) &= ~pin_mask;
  }
 }
}







inline __attribute__((__always_inline__)) static inline void ioport_configure_pin(port_pin_t pin,
  port_pin_flags_t flags)
{
 ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
   arch_ioport_pin_to_mask(pin), flags);
}
# 552 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline void ioport_configure_group(port_id_t port,
  pin_mask_t pin_mask,
  port_pin_flags_t flags)
{
 ioport_configure_port_pin(arch_ioport_port_to_base(
   port), pin_mask, flags);
}
# 571 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline void ioport_set_value(port_pin_t pin, 
# 571 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                                                                   _Bool 
# 571 "../src/ASF/common/services/ioport/mega/ioport.h"
                                                                        value)
{
 arch_ioport_set_pin_level(pin, value);
}
# 584 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline void ioport_set_pin_low(port_pin_t pin)
{
 arch_ioport_set_pin_level(pin, 
# 586 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                               0
# 586 "../src/ASF/common/services/ioport/mega/ioport.h"
                                    );
}
# 597 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline void ioport_set_pin_high(port_pin_t pin)
{
 arch_ioport_set_pin_level(pin, 
# 599 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                               1
# 599 "../src/ASF/common/services/ioport/mega/ioport.h"
                                   );
}
# 609 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline 
# 609 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                             _Bool 
# 609 "../src/ASF/common/services/ioport/mega/ioport.h"
                                  ioport_get_value(port_pin_t pin)
{
 return arch_ioport_get_pin_level(pin);
}
# 621 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline 
# 621 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                             _Bool 
# 621 "../src/ASF/common/services/ioport/mega/ioport.h"
                                  ioport_pin_is_high(port_pin_t pin)
{
 return (arch_ioport_get_pin_level(pin) == 
# 623 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                                          1
# 623 "../src/ASF/common/services/ioport/mega/ioport.h"
                                              );
}
# 633 "../src/ASF/common/services/ioport/mega/ioport.h"
inline __attribute__((__always_inline__)) static inline 
# 633 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                             _Bool 
# 633 "../src/ASF/common/services/ioport/mega/ioport.h"
                                  ioport_pin_is_low(port_pin_t pin)
{
 return (arch_ioport_get_pin_level(pin) == 
# 635 "../src/ASF/common/services/ioport/mega/ioport.h" 3 4
                                          0
# 635 "../src/ASF/common/services/ioport/mega/ioport.h"
                                               );
}






inline __attribute__((__always_inline__)) static inline void ioport_toggle_pin(port_pin_t pin)
{
 arch_ioport_toggle_pin_level(pin);
}






inline __attribute__((__always_inline__)) static inline void ioport_set_group_high(port_id_t port_id,
  pin_mask_t port_mask)
{
 arch_ioport_set_port_level(port_id, port_mask, port_mask);
}






inline __attribute__((__always_inline__)) static inline void ioport_set_group_low(port_id_t port_id,
  pin_mask_t port_mask)
{
 arch_ioport_set_port_level(port_id, port_mask, 0);
}






inline __attribute__((__always_inline__)) static inline void ioport_tgl_group(port_id_t port_id,
  pin_mask_t port_mask)
{
 arch_ioport_toggle_port_level(port_id, port_mask);
}
# 127 "../src/ASF/common/services/ioport/ioport.h" 2
# 145 "../src/ASF/common/services/ioport/ioport.h"
static inline void ioport_init(void)
{
 arch_ioport_init();
}







static inline void ioport_enable_pin(ioport_pin_t pin)
{
 arch_ioport_enable_pin(pin);
}







static inline void ioport_enable_port(ioport_port_t port,
  ioport_port_mask_t mask)
{
 arch_ioport_enable_port(port, mask);
}







static inline void ioport_disable_pin(ioport_pin_t pin)
{
 arch_ioport_disable_pin(pin);
}







static inline void ioport_disable_port(ioport_port_t port,
  ioport_port_mask_t mask)
{
 arch_ioport_disable_port(port, mask);
}
# 205 "../src/ASF/common/services/ioport/ioport.h"
static inline void ioport_set_port_mode(ioport_port_t port,
  ioport_port_mask_t mask, ioport_mode_t mode)
{
 arch_ioport_set_port_mode(port, mask, mode);
}







static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
 arch_ioport_set_pin_mode(pin, mode);
}







static inline void ioport_reset_port_mode(ioport_port_t port,
  ioport_port_mask_t mask)
{
 arch_ioport_set_port_mode(port, mask, 0);
}






static inline void ioport_reset_pin_mode(ioport_pin_t pin)
{
 arch_ioport_set_pin_mode(pin, 0);
}
# 251 "../src/ASF/common/services/ioport/ioport.h"
static inline void ioport_set_port_dir(ioport_port_t port,
  ioport_port_mask_t mask, enum ioport_direction dir)
{
 arch_ioport_set_port_dir(port, mask, dir);
}







static inline void ioport_set_pin_dir(ioport_pin_t pin,
  enum ioport_direction dir)
{
 arch_ioport_set_pin_dir(pin, dir);
}







static inline void ioport_set_pin_level(ioport_pin_t pin, 
# 275 "../src/ASF/common/services/ioport/ioport.h" 3 4
                                                         _Bool 
# 275 "../src/ASF/common/services/ioport/ioport.h"
                                                              level)
{
 arch_ioport_set_pin_level(pin, level);
}
# 288 "../src/ASF/common/services/ioport/ioport.h"
static inline void ioport_set_port_level(ioport_port_t port,
  ioport_port_mask_t mask, enum ioport_value level)
{
 arch_ioport_set_port_level(port, mask, level);
}
# 301 "../src/ASF/common/services/ioport/ioport.h"
static inline 
# 301 "../src/ASF/common/services/ioport/ioport.h" 3 4
             _Bool 
# 301 "../src/ASF/common/services/ioport/ioport.h"
                  ioport_get_pin_level(ioport_pin_t pin)
{
 return arch_ioport_get_pin_level(pin);
}
# 315 "../src/ASF/common/services/ioport/ioport.h"
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
  ioport_port_mask_t mask)
{
 return arch_ioport_get_port_level(port, mask);
}







static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
 arch_ioport_toggle_pin_level(pin);
}







static inline void ioport_toggle_port_level(ioport_port_t port,
  ioport_port_mask_t mask)
{
 arch_ioport_toggle_port_level(port, mask);
}







static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
  enum ioport_sense pin_sense)
{
 arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
# 363 "../src/ASF/common/services/ioport/ioport.h"
static inline void ioport_set_port_sense_mode(ioport_port_t port,
  ioport_port_mask_t mask,
  enum ioport_sense pin_sense)
{
 arch_ioport_set_port_sense_mode(port, mask, pin_sense);
}







static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
 return arch_ioport_pin_to_port_id(pin);
}







static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
 return arch_ioport_pin_to_mask(pin);
}
# 42 "../src/ASF/common/services/gpio/mega_gpio/mega_gpio.h" 2

#define gpio_pin_is_low(io_id) ioport_pin_is_low(io_id)


#define gpio_pin_is_high(io_id) ioport_pin_is_high(io_id)


#define gpio_set_pin_high(io_id) ioport_set_value(io_id, 1)


#define gpio_set_pin_low(io_id) ioport_set_value(io_id, 0)


#define gpio_toggle_pin(io_id) ioport_toggle_pin(io_id)


#define gpio_configure_pin(io_id,io_flags) ioport_configure_pin(io_id, io_flags)


#define gpio_configure_group(port_id,port_mask,io_flags) ioport_configure_group(port_id, port_mask, io_flags)


#define gpio_set_pin_group_high(port_id,mask) ioport_set_group_high(port_id, mask)


#define gpio_set_pin_group_low(port_id,mask) ioport_set_group_low(port_id, mask)


#define gpio_toggle_pin_group(port_id,mask) ioport_tgl_group(port_id, mask)
# 47 "../src/ASF/common/services/gpio/gpio.h" 2
# 57 "../src/asf.h" 2


# 1 "../src/ASF/common/boards/board.h" 1
# 41 "../src/ASF/common/boards/board.h"
#define _BOARD_H_ 
# 62 "../src/ASF/common/boards/board.h"
#define EVK1100 1
#define EVK1101 2
#define UC3C_EK 3
#define EVK1104 4
#define EVK1105 5
#define STK600_RCUC3L0 6
#define UC3L_EK 7
#define XPLAIN 8
#define STK600_RC064X 10
#define STK600_RC100X 11
#define UC3_A3_XPLAINED 13
#define UC3_L0_XPLAINED 15
#define STK600_RCUC3D 16
#define STK600_RCUC3C0 17
#define XMEGA_B1_XPLAINED 18
#define XMEGA_A1_XPLAINED 19
#define XMEGA_A1U_XPLAINED_PRO 20
#define STK600_RCUC3L4 21
#define UC3_L0_XPLAINED_BC 22
#define MEGA1284P_XPLAINED_BC 23
#define STK600_RC044X 24
#define STK600_RCUC3B0 25
#define UC3_L0_QT600 26
#define XMEGA_A3BU_XPLAINED 27
#define STK600_RC064X_LCDX 28
#define STK600_RC100X_LCDX 29
#define UC3B_BOARD_CONTROLLER 30
#define RZ600 31
#define SAM3S_EK 32
#define SAM3U_EK 33
#define SAM3X_EK 34
#define SAM3N_EK 35
#define SAM3S_EK2 36
#define SAM4S_EK 37
#define STK600_RCUC3A0 38
#define STK600_MEGA 39
#define MEGA_1284P_XPLAINED 40
#define SAM4S_XPLAINED 41
#define ATXMEGA128A1_QT600 42
#define ARDUINO_DUE_X 43
#define STK600_RCUC3L3 44
#define SAM4L_EK 45
#define STK600_MEGA_RF 46
#define XMEGA_C3_XPLAINED 47
#define STK600_RC032X 48
#define SAM4S_EK2 49
#define XMEGA_E5_XPLAINED 50
#define SAM4E_EK 51
#define ATMEGA256RFR2_XPLAINED_PRO 52
#define SAM4S_XPLAINED_PRO 53
#define SAM4L_XPLAINED_PRO 54
#define ATMEGA256RFR2_ZIGBIT 55
#define XMEGA_RF233_ZIGBIT 56
#define XMEGA_RF212B_ZIGBIT 57
#define SAM4S_WPIR_RD 58
#define SAMD20_XPLAINED_PRO 59
#define SAM4L8_XPLAINED_PRO 60
#define SAM4N_XPLAINED_PRO 61
#define XMEGA_A3_REB_CBB 62
#define ATMEGARFX_RCB 63
#define SAM4C_EK 64
#define RCB256RFR2_XPRO 65
#define SAMG53_XPLAINED_PRO 66
#define SAM4CP16BMB 67
#define SAM4E_XPLAINED_PRO 68
#define SAMD21_XPLAINED_PRO 69
#define SAMR21_XPLAINED_PRO 70
#define SAM4CMP_DB 71
#define SAM4CMS_DB 72
#define ATPL230AMB 73
#define SAMD11_XPLAINED_PRO 74
#define SAMG55_XPLAINED_PRO 75
#define SAML21_XPLAINED_PRO 76
#define SAMD10_XPLAINED_MINI 77
#define SAMDA1_XPLAINED_PRO 78
#define SAMW25_XPLAINED_PRO 79
#define SAMC21_XPLAINED_PRO 80
#define SAMV71_XPLAINED_ULTRA 81
#define ATMEGA328P_XPLAINED_MINI 82
#define ATMEGA328PB_XPLAINED_MINI 83
#define SAMB11_XPLAINED_PRO 84
#define SAME70_XPLAINED 85
#define SAML22_XPLAINED_PRO 86
#define SAML22_XPLAINED_PRO_B 87
#define SAMR21ZLL_EK 88
#define ATMEGA168PB_XPLAINED_MINI 89
#define ATMEGA324PB_XPLAINED_PRO 90
#define SAMB11ZR_XPLAINED_PRO 92
#define SAMR30_XPLAINED_PRO 93
#define SAMHA1G16A_XPLAINED_PRO 94
#define SAMR34_XPLAINED_PRO 95
#define SIMULATOR_XMEGA_A1 97
#define AVR_SIMULATOR_UC3 98
#define USER_BOARD 99
#define DUMMY_BOARD 100
#define SAMB11ZR_SENSOR_TAG 101
#define SAMR30_MODULE_XPLAINED_PRO 102
#define SAMR21G18_MODULE 103
#define SAMR21B18_MODULE 104
#define WLR089_XPLAINED_PRO 105





#define EXT1102 1
#define MC300 2
#define SENSORS_XPLAINED_INERTIAL_1 3
#define SENSORS_XPLAINED_INERTIAL_2 4
#define SENSORS_XPLAINED_PRESSURE_1 5
#define SENSORS_XPLAINED_LIGHTPROX_1 6
#define SENSORS_XPLAINED_INERTIAL_A1 7
#define RZ600_AT86RF231 8
#define RZ600_AT86RF230B 9
#define RZ600_AT86RF212 10
#define SENSORS_XPLAINED_BREADBOARD 11
#define SECURITY_XPLAINED 12
#define USER_EXT_BOARD 99
# 363 "../src/ASF/common/boards/board.h"
# 1 "../src/ASF/mega/boards/atmega328p_xplained_mini/atmega328p_xplained_mini.h" 1
# 42 "../src/ASF/mega/boards/atmega328p_xplained_mini/atmega328p_xplained_mini.h"
#define _ATMEGA328P_XPLAINED_MINI_ 


# 1 "../src/ASF/mega/boards/atmega328p_xplained_mini/led.h" 1
# 38 "../src/ASF/mega/boards/atmega328p_xplained_mini/led.h"
#define _LED_H_ 
# 49 "../src/ASF/mega/boards/atmega328p_xplained_mini/led.h"
#define LED_Off(led_gpio) gpio_set_pin_low(led_gpio)







#define LED_On(led_gpio) gpio_set_pin_high(led_gpio)







#define LED_Toggle(led_gpio) gpio_toggle_pin(led_gpio)
# 46 "../src/ASF/mega/boards/atmega328p_xplained_mini/atmega328p_xplained_mini.h" 2

#define MCU_SOC_NAME "ATMEGA328P"
#define BOARD_NAME "ATMEGA328P_XPLAINED_MINI"


#define LED0_GPIO IOPORT_CREATE_PIN(PORTB, 5)
#define LED0 LED0_GPIO


#define LED_COUNT 1

#define GPIO_PUSH_BUTTON_0 IOPORT_CREATE_PIN(PORTB, 7)



#define TWID_SDA IOPORT_CREATE_PIN(PORTC, 4)
#define TWID_SCL IOPORT_CREATE_PIN(PORTC, 5)
#define USART_RX IOPORT_CREATE_PIN(PORTD, 0)
#define USART_TX IOPORT_CREATE_PIN(PORTD, 1)
#define SPI_SS_A IOPORT_CREATE_PIN(PORTB, 2)
#define SPI_MOSI IOPORT_CREATE_PIN(PORTB, 3)
#define SPI_MISO IOPORT_CREATE_PIN(PORTB, 4)
#define SPI_SCK IOPORT_CREATE_PIN(PORTB, 5)
# 364 "../src/ASF/common/boards/board.h" 2
# 441 "../src/ASF/common/boards/board.h"
extern void board_init(void);
# 60 "../src/asf.h" 2
# 69 "../src/asf.h"
# 1 "../src/ASF/mega/utils/status_codes.h" 1
# 40 "../src/ASF/mega/utils/status_codes.h"
#define STATUS_CODES_H_INCLUDED 
# 64 "../src/ASF/mega/utils/status_codes.h"
enum status_code {
 STATUS_OK = 0,
 ERR_IO_ERROR = -1,
 ERR_FLUSHED = -2,
 ERR_TIMEOUT = -3,
 ERR_BAD_DATA = -4,
 ERR_PROTOCOL = -5,
 ERR_UNSUPPORTED_DEV = -6,
 ERR_NO_MEMORY = -7,
 ERR_INVALID_ARG = -8,
 ERR_BAD_ADDRESS = -9,
 ERR_BUSY = -10,
 ERR_BAD_FORMAT = -11,
 ERR_NO_TIMER = -12,
 ERR_TIMER_ALREADY_RUNNING = -13,
 ERR_TIMER_NOT_RUNNING = -14,
# 90 "../src/ASF/mega/utils/status_codes.h"
 OPERATION_IN_PROGRESS = -128,
};

typedef enum status_code status_code_t;
# 70 "../src/asf.h" 2
# 2 "../src/JoystickButton.c" 2



# 1 "../src/ADC.h" 1
# 10 "../src/ADC.h"
#define ADC_H_ 
#define VRX 5
#define VRY 4

void adc_init(void);
uint16_t read_adc(uint8_t channel);
uint16_t read_VRX(void);
uint16_t read_VRY(void);
# 6 "../src/JoystickButton.c" 2
# 1 "../src/UART.h" 1
# 10 "../src/UART.h"
#define UART_H_ 
void UART_Init(void);
uint8_t UART_rx_status(void);
uint8_t UART_get_data(void);
void UART_send_data(char data);
void UART_putstring(char *);

void send_num(int numero);

int uart_test(void);
# 7 "../src/JoystickButton.c" 2
# 1 "../src/Timer.h" 1
# 10 "../src/Timer.h"
#define TIMER_H_ 
void init_RTI(void);
int Timer_TB (void);
# 8 "../src/JoystickButton.c" 2
# 1 "../src/JoystickButton.h" 1
# 10 "../src/JoystickButton.h"
#define JOYSTICKBUTTON_H_ 

void Joystick(void);
uint8_t button_check(void);
# 9 "../src/JoystickButton.c" 2

#define pressed 0


volatile int ijoy,jjoy;
volatile int ispressed;
void Joystick(void)
{
 if (button_check() == 0)
 {

 }
 else if ((read_VRX() >= 700))
 {
  if (ijoy < 7)
  {
   ijoy++;
  }
 }
 else if ((read_VRX() == 0) && (read_VRY() >= 0) && (read_VRY() <= 1023))
 {
  if (ijoy > 0)
  {
   ijoy--;
  }
 }

 else if ((read_VRX() >= 0) && (read_VRX() <= 1023) && (read_VRY() >= 0) && (read_VRY() <= 200))
 {
  if (jjoy < 7)
  {
   jjoy++;
  }
 }
 else if ((read_VRX() >= 0) && (read_VRX() <= 1023) && (read_VRY() >= 700)&& (read_VRY() <= 1023))
 {
  if (jjoy > 0)
  {
   jjoy--;
  }
 }
 else
 {






 }

}



uint8_t button_check(void)
{
 ispressed = (
# 66 "../src/JoystickButton.c" 3
             (*(volatile uint8_t *)((0x09) + 0x20)) 
# 66 "../src/JoystickButton.c"
                  & (1<<6));
 return (ispressed);
}
